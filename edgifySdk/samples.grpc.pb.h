// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: samples.proto
#ifndef GRPC_samples_2eproto__INCLUDED
#define GRPC_samples_2eproto__INCLUDED

#include "samples.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace edgify {

class SamplesService final {
 public:
  static constexpr char const* service_full_name() {
    return "edgify.SamplesService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest& request, ::edgify::GetSamplesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GetSamplesResponse>> AsyncGetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GetSamplesResponse>>(AsyncGetSamplesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GetSamplesResponse>> PrepareAsyncGetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GetSamplesResponse>>(PrepareAsyncGetSamplesRaw(context, request, cq));
    }
    virtual ::grpc::Status AddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest& request, ::edgify::AddSampleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::AddSampleResponse>> AsyncAddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::AddSampleResponse>>(AsyncAddSampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::AddSampleResponse>> PrepareAsyncAddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::AddSampleResponse>>(PrepareAsyncAddSampleRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest& request, ::edgify::UpdateSampleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::UpdateSampleResponse>> AsyncUpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::UpdateSampleResponse>>(AsyncUpdateSampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::UpdateSampleResponse>> PrepareAsyncUpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::UpdateSampleResponse>>(PrepareAsyncUpdateSampleRaw(context, request, cq));
    }
    virtual ::grpc::Status Sync(::grpc::ClientContext* context, const ::edgify::SyncRequest& request, ::edgify::SyncResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::SyncResponse>> AsyncSync(::grpc::ClientContext* context, const ::edgify::SyncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::SyncResponse>>(AsyncSyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::SyncResponse>> PrepareAsyncSync(::grpc::ClientContext* context, const ::edgify::SyncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::SyncResponse>>(PrepareAsyncSyncRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest& request, ::edgify::DeleteAllSamplesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteAllSamplesResponse>> AsyncDeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteAllSamplesResponse>>(AsyncDeleteAllSamplesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteAllSamplesResponse>> PrepareAsyncDeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteAllSamplesResponse>>(PrepareAsyncDeleteAllSamplesRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest& request, ::edgify::DeleteSamplesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteSamplesResponse>> AsyncDeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteSamplesResponse>>(AsyncDeleteSamplesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteSamplesResponse>> PrepareAsyncDeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteSamplesResponse>>(PrepareAsyncDeleteSamplesRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest& request, ::edgify::DeleteSampleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteSampleResponse>> AsyncDeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteSampleResponse>>(AsyncDeleteSampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteSampleResponse>> PrepareAsyncDeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteSampleResponse>>(PrepareAsyncDeleteSampleRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest* request, ::edgify::GetSamplesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest* request, ::edgify::GetSamplesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest* request, ::edgify::GetSamplesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest* request, ::edgify::AddSampleResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest* request, ::edgify::AddSampleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest* request, ::edgify::AddSampleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest* request, ::edgify::UpdateSampleResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest* request, ::edgify::UpdateSampleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest* request, ::edgify::UpdateSampleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Sync(::grpc::ClientContext* context, const ::edgify::SyncRequest* request, ::edgify::SyncResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Sync(::grpc::ClientContext* context, const ::edgify::SyncRequest* request, ::edgify::SyncResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Sync(::grpc::ClientContext* context, const ::edgify::SyncRequest* request, ::edgify::SyncResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest* request, ::edgify::DeleteAllSamplesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest* request, ::edgify::DeleteAllSamplesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest* request, ::edgify::DeleteAllSamplesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest* request, ::edgify::DeleteSamplesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest* request, ::edgify::DeleteSamplesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest* request, ::edgify::DeleteSamplesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest* request, ::edgify::DeleteSampleResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest* request, ::edgify::DeleteSampleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest* request, ::edgify::DeleteSampleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GetSamplesResponse>* AsyncGetSamplesRaw(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GetSamplesResponse>* PrepareAsyncGetSamplesRaw(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::AddSampleResponse>* AsyncAddSampleRaw(::grpc::ClientContext* context, const ::edgify::AddSampleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::AddSampleResponse>* PrepareAsyncAddSampleRaw(::grpc::ClientContext* context, const ::edgify::AddSampleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::UpdateSampleResponse>* AsyncUpdateSampleRaw(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::UpdateSampleResponse>* PrepareAsyncUpdateSampleRaw(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::SyncResponse>* AsyncSyncRaw(::grpc::ClientContext* context, const ::edgify::SyncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::SyncResponse>* PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::edgify::SyncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteAllSamplesResponse>* AsyncDeleteAllSamplesRaw(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteAllSamplesResponse>* PrepareAsyncDeleteAllSamplesRaw(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteSamplesResponse>* AsyncDeleteSamplesRaw(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteSamplesResponse>* PrepareAsyncDeleteSamplesRaw(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteSampleResponse>* AsyncDeleteSampleRaw(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::DeleteSampleResponse>* PrepareAsyncDeleteSampleRaw(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest& request, ::edgify::GetSamplesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::GetSamplesResponse>> AsyncGetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::GetSamplesResponse>>(AsyncGetSamplesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::GetSamplesResponse>> PrepareAsyncGetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::GetSamplesResponse>>(PrepareAsyncGetSamplesRaw(context, request, cq));
    }
    ::grpc::Status AddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest& request, ::edgify::AddSampleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::AddSampleResponse>> AsyncAddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::AddSampleResponse>>(AsyncAddSampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::AddSampleResponse>> PrepareAsyncAddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::AddSampleResponse>>(PrepareAsyncAddSampleRaw(context, request, cq));
    }
    ::grpc::Status UpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest& request, ::edgify::UpdateSampleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::UpdateSampleResponse>> AsyncUpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::UpdateSampleResponse>>(AsyncUpdateSampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::UpdateSampleResponse>> PrepareAsyncUpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::UpdateSampleResponse>>(PrepareAsyncUpdateSampleRaw(context, request, cq));
    }
    ::grpc::Status Sync(::grpc::ClientContext* context, const ::edgify::SyncRequest& request, ::edgify::SyncResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::SyncResponse>> AsyncSync(::grpc::ClientContext* context, const ::edgify::SyncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::SyncResponse>>(AsyncSyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::SyncResponse>> PrepareAsyncSync(::grpc::ClientContext* context, const ::edgify::SyncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::SyncResponse>>(PrepareAsyncSyncRaw(context, request, cq));
    }
    ::grpc::Status DeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest& request, ::edgify::DeleteAllSamplesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::DeleteAllSamplesResponse>> AsyncDeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::DeleteAllSamplesResponse>>(AsyncDeleteAllSamplesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::DeleteAllSamplesResponse>> PrepareAsyncDeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::DeleteAllSamplesResponse>>(PrepareAsyncDeleteAllSamplesRaw(context, request, cq));
    }
    ::grpc::Status DeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest& request, ::edgify::DeleteSamplesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::DeleteSamplesResponse>> AsyncDeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::DeleteSamplesResponse>>(AsyncDeleteSamplesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::DeleteSamplesResponse>> PrepareAsyncDeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::DeleteSamplesResponse>>(PrepareAsyncDeleteSamplesRaw(context, request, cq));
    }
    ::grpc::Status DeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest& request, ::edgify::DeleteSampleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::DeleteSampleResponse>> AsyncDeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::DeleteSampleResponse>>(AsyncDeleteSampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::DeleteSampleResponse>> PrepareAsyncDeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::DeleteSampleResponse>>(PrepareAsyncDeleteSampleRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest* request, ::edgify::GetSamplesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest* request, ::edgify::GetSamplesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest* request, ::edgify::GetSamplesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest* request, ::edgify::AddSampleResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest* request, ::edgify::AddSampleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest* request, ::edgify::AddSampleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest* request, ::edgify::UpdateSampleResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest* request, ::edgify::UpdateSampleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest* request, ::edgify::UpdateSampleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Sync(::grpc::ClientContext* context, const ::edgify::SyncRequest* request, ::edgify::SyncResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Sync(::grpc::ClientContext* context, const ::edgify::SyncRequest* request, ::edgify::SyncResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Sync(::grpc::ClientContext* context, const ::edgify::SyncRequest* request, ::edgify::SyncResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest* request, ::edgify::DeleteAllSamplesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest* request, ::edgify::DeleteAllSamplesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest* request, ::edgify::DeleteAllSamplesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest* request, ::edgify::DeleteSamplesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest* request, ::edgify::DeleteSamplesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest* request, ::edgify::DeleteSamplesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest* request, ::edgify::DeleteSampleResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest* request, ::edgify::DeleteSampleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest* request, ::edgify::DeleteSampleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::edgify::GetSamplesResponse>* AsyncGetSamplesRaw(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::GetSamplesResponse>* PrepareAsyncGetSamplesRaw(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::AddSampleResponse>* AsyncAddSampleRaw(::grpc::ClientContext* context, const ::edgify::AddSampleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::AddSampleResponse>* PrepareAsyncAddSampleRaw(::grpc::ClientContext* context, const ::edgify::AddSampleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::UpdateSampleResponse>* AsyncUpdateSampleRaw(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::UpdateSampleResponse>* PrepareAsyncUpdateSampleRaw(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::SyncResponse>* AsyncSyncRaw(::grpc::ClientContext* context, const ::edgify::SyncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::SyncResponse>* PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::edgify::SyncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::DeleteAllSamplesResponse>* AsyncDeleteAllSamplesRaw(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::DeleteAllSamplesResponse>* PrepareAsyncDeleteAllSamplesRaw(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::DeleteSamplesResponse>* AsyncDeleteSamplesRaw(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::DeleteSamplesResponse>* PrepareAsyncDeleteSamplesRaw(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::DeleteSampleResponse>* AsyncDeleteSampleRaw(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::DeleteSampleResponse>* PrepareAsyncDeleteSampleRaw(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetSamples_;
    const ::grpc::internal::RpcMethod rpcmethod_AddSample_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSample_;
    const ::grpc::internal::RpcMethod rpcmethod_Sync_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAllSamples_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSamples_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSample_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetSamples(::grpc::ServerContext* context, const ::edgify::GetSamplesRequest* request, ::edgify::GetSamplesResponse* response);
    virtual ::grpc::Status AddSample(::grpc::ServerContext* context, const ::edgify::AddSampleRequest* request, ::edgify::AddSampleResponse* response);
    virtual ::grpc::Status UpdateSample(::grpc::ServerContext* context, const ::edgify::UpdateSampleRequest* request, ::edgify::UpdateSampleResponse* response);
    virtual ::grpc::Status Sync(::grpc::ServerContext* context, const ::edgify::SyncRequest* request, ::edgify::SyncResponse* response);
    virtual ::grpc::Status DeleteAllSamples(::grpc::ServerContext* context, const ::edgify::DeleteAllSamplesRequest* request, ::edgify::DeleteAllSamplesResponse* response);
    virtual ::grpc::Status DeleteSamples(::grpc::ServerContext* context, const ::edgify::DeleteSamplesRequest* request, ::edgify::DeleteSamplesResponse* response);
    virtual ::grpc::Status DeleteSample(::grpc::ServerContext* context, const ::edgify::DeleteSampleRequest* request, ::edgify::DeleteSampleResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSamples() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSamples(::grpc::ServerContext* /*context*/, const ::edgify::GetSamplesRequest* /*request*/, ::edgify::GetSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSamples(::grpc::ServerContext* context, ::edgify::GetSamplesRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgify::GetSamplesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddSample() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSample(::grpc::ServerContext* /*context*/, const ::edgify::AddSampleRequest* /*request*/, ::edgify::AddSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSample(::grpc::ServerContext* context, ::edgify::AddSampleRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgify::AddSampleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateSample() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSample(::grpc::ServerContext* /*context*/, const ::edgify::UpdateSampleRequest* /*request*/, ::edgify::UpdateSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSample(::grpc::ServerContext* context, ::edgify::UpdateSampleRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgify::UpdateSampleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Sync() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::edgify::SyncRequest* /*request*/, ::edgify::SyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSync(::grpc::ServerContext* context, ::edgify::SyncRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgify::SyncResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAllSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAllSamples() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteAllSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAllSamples(::grpc::ServerContext* /*context*/, const ::edgify::DeleteAllSamplesRequest* /*request*/, ::edgify::DeleteAllSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAllSamples(::grpc::ServerContext* context, ::edgify::DeleteAllSamplesRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgify::DeleteAllSamplesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSamples() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSamples(::grpc::ServerContext* /*context*/, const ::edgify::DeleteSamplesRequest* /*request*/, ::edgify::DeleteSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSamples(::grpc::ServerContext* context, ::edgify::DeleteSamplesRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgify::DeleteSamplesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSample() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSample(::grpc::ServerContext* /*context*/, const ::edgify::DeleteSampleRequest* /*request*/, ::edgify::DeleteSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSample(::grpc::ServerContext* context, ::edgify::DeleteSampleRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgify::DeleteSampleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetSamples<WithAsyncMethod_AddSample<WithAsyncMethod_UpdateSample<WithAsyncMethod_Sync<WithAsyncMethod_DeleteAllSamples<WithAsyncMethod_DeleteSamples<WithAsyncMethod_DeleteSample<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSamples() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::edgify::GetSamplesRequest, ::edgify::GetSamplesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::edgify::GetSamplesRequest* request, ::edgify::GetSamplesResponse* response) { return this->GetSamples(context, request, response); }));}
    void SetMessageAllocatorFor_GetSamples(
        ::grpc::experimental::MessageAllocator< ::edgify::GetSamplesRequest, ::edgify::GetSamplesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::edgify::GetSamplesRequest, ::edgify::GetSamplesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSamples(::grpc::ServerContext* /*context*/, const ::edgify::GetSamplesRequest* /*request*/, ::edgify::GetSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSamples(
      ::grpc::CallbackServerContext* /*context*/, const ::edgify::GetSamplesRequest* /*request*/, ::edgify::GetSamplesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSamples(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::edgify::GetSamplesRequest* /*request*/, ::edgify::GetSamplesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddSample() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::edgify::AddSampleRequest, ::edgify::AddSampleResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::edgify::AddSampleRequest* request, ::edgify::AddSampleResponse* response) { return this->AddSample(context, request, response); }));}
    void SetMessageAllocatorFor_AddSample(
        ::grpc::experimental::MessageAllocator< ::edgify::AddSampleRequest, ::edgify::AddSampleResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::edgify::AddSampleRequest, ::edgify::AddSampleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSample(::grpc::ServerContext* /*context*/, const ::edgify::AddSampleRequest* /*request*/, ::edgify::AddSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddSample(
      ::grpc::CallbackServerContext* /*context*/, const ::edgify::AddSampleRequest* /*request*/, ::edgify::AddSampleResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddSample(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::edgify::AddSampleRequest* /*request*/, ::edgify::AddSampleResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateSample() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::edgify::UpdateSampleRequest, ::edgify::UpdateSampleResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::edgify::UpdateSampleRequest* request, ::edgify::UpdateSampleResponse* response) { return this->UpdateSample(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateSample(
        ::grpc::experimental::MessageAllocator< ::edgify::UpdateSampleRequest, ::edgify::UpdateSampleResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::edgify::UpdateSampleRequest, ::edgify::UpdateSampleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSample(::grpc::ServerContext* /*context*/, const ::edgify::UpdateSampleRequest* /*request*/, ::edgify::UpdateSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateSample(
      ::grpc::CallbackServerContext* /*context*/, const ::edgify::UpdateSampleRequest* /*request*/, ::edgify::UpdateSampleResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateSample(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::edgify::UpdateSampleRequest* /*request*/, ::edgify::UpdateSampleResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Sync() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::edgify::SyncRequest, ::edgify::SyncResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::edgify::SyncRequest* request, ::edgify::SyncResponse* response) { return this->Sync(context, request, response); }));}
    void SetMessageAllocatorFor_Sync(
        ::grpc::experimental::MessageAllocator< ::edgify::SyncRequest, ::edgify::SyncResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::edgify::SyncRequest, ::edgify::SyncResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::edgify::SyncRequest* /*request*/, ::edgify::SyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Sync(
      ::grpc::CallbackServerContext* /*context*/, const ::edgify::SyncRequest* /*request*/, ::edgify::SyncResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Sync(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::edgify::SyncRequest* /*request*/, ::edgify::SyncResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteAllSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteAllSamples() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::edgify::DeleteAllSamplesRequest, ::edgify::DeleteAllSamplesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::edgify::DeleteAllSamplesRequest* request, ::edgify::DeleteAllSamplesResponse* response) { return this->DeleteAllSamples(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAllSamples(
        ::grpc::experimental::MessageAllocator< ::edgify::DeleteAllSamplesRequest, ::edgify::DeleteAllSamplesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::edgify::DeleteAllSamplesRequest, ::edgify::DeleteAllSamplesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteAllSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAllSamples(::grpc::ServerContext* /*context*/, const ::edgify::DeleteAllSamplesRequest* /*request*/, ::edgify::DeleteAllSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteAllSamples(
      ::grpc::CallbackServerContext* /*context*/, const ::edgify::DeleteAllSamplesRequest* /*request*/, ::edgify::DeleteAllSamplesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteAllSamples(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::edgify::DeleteAllSamplesRequest* /*request*/, ::edgify::DeleteAllSamplesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteSamples() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::edgify::DeleteSamplesRequest, ::edgify::DeleteSamplesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::edgify::DeleteSamplesRequest* request, ::edgify::DeleteSamplesResponse* response) { return this->DeleteSamples(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSamples(
        ::grpc::experimental::MessageAllocator< ::edgify::DeleteSamplesRequest, ::edgify::DeleteSamplesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::edgify::DeleteSamplesRequest, ::edgify::DeleteSamplesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSamples(::grpc::ServerContext* /*context*/, const ::edgify::DeleteSamplesRequest* /*request*/, ::edgify::DeleteSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteSamples(
      ::grpc::CallbackServerContext* /*context*/, const ::edgify::DeleteSamplesRequest* /*request*/, ::edgify::DeleteSamplesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteSamples(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::edgify::DeleteSamplesRequest* /*request*/, ::edgify::DeleteSamplesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteSample() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::edgify::DeleteSampleRequest, ::edgify::DeleteSampleResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::edgify::DeleteSampleRequest* request, ::edgify::DeleteSampleResponse* response) { return this->DeleteSample(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSample(
        ::grpc::experimental::MessageAllocator< ::edgify::DeleteSampleRequest, ::edgify::DeleteSampleResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::edgify::DeleteSampleRequest, ::edgify::DeleteSampleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSample(::grpc::ServerContext* /*context*/, const ::edgify::DeleteSampleRequest* /*request*/, ::edgify::DeleteSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteSample(
      ::grpc::CallbackServerContext* /*context*/, const ::edgify::DeleteSampleRequest* /*request*/, ::edgify::DeleteSampleResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteSample(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::edgify::DeleteSampleRequest* /*request*/, ::edgify::DeleteSampleResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetSamples<ExperimentalWithCallbackMethod_AddSample<ExperimentalWithCallbackMethod_UpdateSample<ExperimentalWithCallbackMethod_Sync<ExperimentalWithCallbackMethod_DeleteAllSamples<ExperimentalWithCallbackMethod_DeleteSamples<ExperimentalWithCallbackMethod_DeleteSample<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetSamples<ExperimentalWithCallbackMethod_AddSample<ExperimentalWithCallbackMethod_UpdateSample<ExperimentalWithCallbackMethod_Sync<ExperimentalWithCallbackMethod_DeleteAllSamples<ExperimentalWithCallbackMethod_DeleteSamples<ExperimentalWithCallbackMethod_DeleteSample<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSamples() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSamples(::grpc::ServerContext* /*context*/, const ::edgify::GetSamplesRequest* /*request*/, ::edgify::GetSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddSample() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSample(::grpc::ServerContext* /*context*/, const ::edgify::AddSampleRequest* /*request*/, ::edgify::AddSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateSample() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSample(::grpc::ServerContext* /*context*/, const ::edgify::UpdateSampleRequest* /*request*/, ::edgify::UpdateSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Sync() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::edgify::SyncRequest* /*request*/, ::edgify::SyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAllSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAllSamples() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteAllSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAllSamples(::grpc::ServerContext* /*context*/, const ::edgify::DeleteAllSamplesRequest* /*request*/, ::edgify::DeleteAllSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSamples() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSamples(::grpc::ServerContext* /*context*/, const ::edgify::DeleteSamplesRequest* /*request*/, ::edgify::DeleteSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSample() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSample(::grpc::ServerContext* /*context*/, const ::edgify::DeleteSampleRequest* /*request*/, ::edgify::DeleteSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSamples() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSamples(::grpc::ServerContext* /*context*/, const ::edgify::GetSamplesRequest* /*request*/, ::edgify::GetSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSamples(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddSample() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSample(::grpc::ServerContext* /*context*/, const ::edgify::AddSampleRequest* /*request*/, ::edgify::AddSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSample(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateSample() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSample(::grpc::ServerContext* /*context*/, const ::edgify::UpdateSampleRequest* /*request*/, ::edgify::UpdateSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSample(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Sync() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::edgify::SyncRequest* /*request*/, ::edgify::SyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSync(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAllSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAllSamples() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteAllSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAllSamples(::grpc::ServerContext* /*context*/, const ::edgify::DeleteAllSamplesRequest* /*request*/, ::edgify::DeleteAllSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAllSamples(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSamples() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeleteSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSamples(::grpc::ServerContext* /*context*/, const ::edgify::DeleteSamplesRequest* /*request*/, ::edgify::DeleteSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSamples(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSample() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DeleteSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSample(::grpc::ServerContext* /*context*/, const ::edgify::DeleteSampleRequest* /*request*/, ::edgify::DeleteSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSample(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSamples() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSamples(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSamples(::grpc::ServerContext* /*context*/, const ::edgify::GetSamplesRequest* /*request*/, ::edgify::GetSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSamples(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSamples(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddSample() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddSample(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSample(::grpc::ServerContext* /*context*/, const ::edgify::AddSampleRequest* /*request*/, ::edgify::AddSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddSample(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddSample(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateSample() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateSample(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSample(::grpc::ServerContext* /*context*/, const ::edgify::UpdateSampleRequest* /*request*/, ::edgify::UpdateSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateSample(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateSample(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Sync() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Sync(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::edgify::SyncRequest* /*request*/, ::edgify::SyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Sync(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Sync(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteAllSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteAllSamples() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAllSamples(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteAllSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAllSamples(::grpc::ServerContext* /*context*/, const ::edgify::DeleteAllSamplesRequest* /*request*/, ::edgify::DeleteAllSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteAllSamples(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteAllSamples(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteSamples() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSamples(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSamples(::grpc::ServerContext* /*context*/, const ::edgify::DeleteSamplesRequest* /*request*/, ::edgify::DeleteSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteSamples(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteSamples(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteSample() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSample(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSample(::grpc::ServerContext* /*context*/, const ::edgify::DeleteSampleRequest* /*request*/, ::edgify::DeleteSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteSample(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteSample(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSamples() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::edgify::GetSamplesRequest, ::edgify::GetSamplesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::edgify::GetSamplesRequest, ::edgify::GetSamplesResponse>* streamer) {
                       return this->StreamedGetSamples(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSamples(::grpc::ServerContext* /*context*/, const ::edgify::GetSamplesRequest* /*request*/, ::edgify::GetSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSamples(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgify::GetSamplesRequest,::edgify::GetSamplesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddSample() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::edgify::AddSampleRequest, ::edgify::AddSampleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::edgify::AddSampleRequest, ::edgify::AddSampleResponse>* streamer) {
                       return this->StreamedAddSample(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddSample(::grpc::ServerContext* /*context*/, const ::edgify::AddSampleRequest* /*request*/, ::edgify::AddSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddSample(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgify::AddSampleRequest,::edgify::AddSampleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateSample() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::edgify::UpdateSampleRequest, ::edgify::UpdateSampleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::edgify::UpdateSampleRequest, ::edgify::UpdateSampleResponse>* streamer) {
                       return this->StreamedUpdateSample(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSample(::grpc::ServerContext* /*context*/, const ::edgify::UpdateSampleRequest* /*request*/, ::edgify::UpdateSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSample(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgify::UpdateSampleRequest,::edgify::UpdateSampleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Sync() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::edgify::SyncRequest, ::edgify::SyncResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::edgify::SyncRequest, ::edgify::SyncResponse>* streamer) {
                       return this->StreamedSync(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Sync(::grpc::ServerContext* /*context*/, const ::edgify::SyncRequest* /*request*/, ::edgify::SyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSync(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgify::SyncRequest,::edgify::SyncResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAllSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAllSamples() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::edgify::DeleteAllSamplesRequest, ::edgify::DeleteAllSamplesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::edgify::DeleteAllSamplesRequest, ::edgify::DeleteAllSamplesResponse>* streamer) {
                       return this->StreamedDeleteAllSamples(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAllSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAllSamples(::grpc::ServerContext* /*context*/, const ::edgify::DeleteAllSamplesRequest* /*request*/, ::edgify::DeleteAllSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAllSamples(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgify::DeleteAllSamplesRequest,::edgify::DeleteAllSamplesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSamples() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::edgify::DeleteSamplesRequest, ::edgify::DeleteSamplesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::edgify::DeleteSamplesRequest, ::edgify::DeleteSamplesResponse>* streamer) {
                       return this->StreamedDeleteSamples(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSamples(::grpc::ServerContext* /*context*/, const ::edgify::DeleteSamplesRequest* /*request*/, ::edgify::DeleteSamplesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSamples(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgify::DeleteSamplesRequest,::edgify::DeleteSamplesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSample() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::edgify::DeleteSampleRequest, ::edgify::DeleteSampleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::edgify::DeleteSampleRequest, ::edgify::DeleteSampleResponse>* streamer) {
                       return this->StreamedDeleteSample(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSample(::grpc::ServerContext* /*context*/, const ::edgify::DeleteSampleRequest* /*request*/, ::edgify::DeleteSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSample(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgify::DeleteSampleRequest,::edgify::DeleteSampleResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSamples<WithStreamedUnaryMethod_AddSample<WithStreamedUnaryMethod_UpdateSample<WithStreamedUnaryMethod_Sync<WithStreamedUnaryMethod_DeleteAllSamples<WithStreamedUnaryMethod_DeleteSamples<WithStreamedUnaryMethod_DeleteSample<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetSamples<WithStreamedUnaryMethod_AddSample<WithStreamedUnaryMethod_UpdateSample<WithStreamedUnaryMethod_Sync<WithStreamedUnaryMethod_DeleteAllSamples<WithStreamedUnaryMethod_DeleteSamples<WithStreamedUnaryMethod_DeleteSample<Service > > > > > > > StreamedService;
};

}  // namespace edgify


#endif  // GRPC_samples_2eproto__INCLUDED

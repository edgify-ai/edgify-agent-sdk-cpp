// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: prediction.proto

#include "prediction.pb.h"
#include "prediction.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace edgify {

static const char* EdgifyService_method_names[] = {
  "/edgify.EdgifyService/GetPrediction",
  "/edgify.EdgifyService/CreateGroundTruth",
  "/edgify.EdgifyService/GetCurrentModelDeployment",
};

std::unique_ptr< EdgifyService::Stub> EdgifyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EdgifyService::Stub> stub(new EdgifyService::Stub(channel, options));
  return stub;
}

EdgifyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetPrediction_(EdgifyService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateGroundTruth_(EdgifyService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCurrentModelDeployment_(EdgifyService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EdgifyService::Stub::GetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest& request, ::edgify::PredictionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::edgify::PredictionRequest, ::edgify::PredictionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPrediction_, context, request, response);
}

void EdgifyService::Stub::experimental_async::GetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest* request, ::edgify::PredictionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::edgify::PredictionRequest, ::edgify::PredictionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPrediction_, context, request, response, std::move(f));
}

void EdgifyService::Stub::experimental_async::GetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest* request, ::edgify::PredictionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPrediction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::edgify::PredictionResponse>* EdgifyService::Stub::PrepareAsyncGetPredictionRaw(::grpc::ClientContext* context, const ::edgify::PredictionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::edgify::PredictionResponse, ::edgify::PredictionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPrediction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::edgify::PredictionResponse>* EdgifyService::Stub::AsyncGetPredictionRaw(::grpc::ClientContext* context, const ::edgify::PredictionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPredictionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EdgifyService::Stub::CreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest& request, ::edgify::GroundTruthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::edgify::GroundTruthRequest, ::edgify::GroundTruthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateGroundTruth_, context, request, response);
}

void EdgifyService::Stub::experimental_async::CreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest* request, ::edgify::GroundTruthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::edgify::GroundTruthRequest, ::edgify::GroundTruthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateGroundTruth_, context, request, response, std::move(f));
}

void EdgifyService::Stub::experimental_async::CreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest* request, ::edgify::GroundTruthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateGroundTruth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::edgify::GroundTruthResponse>* EdgifyService::Stub::PrepareAsyncCreateGroundTruthRaw(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::edgify::GroundTruthResponse, ::edgify::GroundTruthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateGroundTruth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::edgify::GroundTruthResponse>* EdgifyService::Stub::AsyncCreateGroundTruthRaw(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateGroundTruthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EdgifyService::Stub::GetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest& request, ::edgify::GetCurrentModelDeploymentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::edgify::GetCurrentModelDeploymentRequest, ::edgify::GetCurrentModelDeploymentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCurrentModelDeployment_, context, request, response);
}

void EdgifyService::Stub::experimental_async::GetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest* request, ::edgify::GetCurrentModelDeploymentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::edgify::GetCurrentModelDeploymentRequest, ::edgify::GetCurrentModelDeploymentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentModelDeployment_, context, request, response, std::move(f));
}

void EdgifyService::Stub::experimental_async::GetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest* request, ::edgify::GetCurrentModelDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentModelDeployment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::edgify::GetCurrentModelDeploymentResponse>* EdgifyService::Stub::PrepareAsyncGetCurrentModelDeploymentRaw(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::edgify::GetCurrentModelDeploymentResponse, ::edgify::GetCurrentModelDeploymentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCurrentModelDeployment_, context, request);
}

::grpc::ClientAsyncResponseReader< ::edgify::GetCurrentModelDeploymentResponse>* EdgifyService::Stub::AsyncGetCurrentModelDeploymentRaw(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentModelDeploymentRaw(context, request, cq);
  result->StartCall();
  return result;
}

EdgifyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EdgifyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EdgifyService::Service, ::edgify::PredictionRequest, ::edgify::PredictionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EdgifyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::edgify::PredictionRequest* req,
             ::edgify::PredictionResponse* resp) {
               return service->GetPrediction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EdgifyService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EdgifyService::Service, ::edgify::GroundTruthRequest, ::edgify::GroundTruthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EdgifyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::edgify::GroundTruthRequest* req,
             ::edgify::GroundTruthResponse* resp) {
               return service->CreateGroundTruth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EdgifyService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EdgifyService::Service, ::edgify::GetCurrentModelDeploymentRequest, ::edgify::GetCurrentModelDeploymentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EdgifyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::edgify::GetCurrentModelDeploymentRequest* req,
             ::edgify::GetCurrentModelDeploymentResponse* resp) {
               return service->GetCurrentModelDeployment(ctx, req, resp);
             }, this)));
}

EdgifyService::Service::~Service() {
}

::grpc::Status EdgifyService::Service::GetPrediction(::grpc::ServerContext* context, const ::edgify::PredictionRequest* request, ::edgify::PredictionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EdgifyService::Service::CreateGroundTruth(::grpc::ServerContext* context, const ::edgify::GroundTruthRequest* request, ::edgify::GroundTruthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EdgifyService::Service::GetCurrentModelDeployment(::grpc::ServerContext* context, const ::edgify::GetCurrentModelDeploymentRequest* request, ::edgify::GetCurrentModelDeploymentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace edgify


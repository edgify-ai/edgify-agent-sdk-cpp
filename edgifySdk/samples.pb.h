// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: samples.proto

#ifndef PROTOBUF_INCLUDED_samples_2eproto
#define PROTOBUF_INCLUDED_samples_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_samples_2eproto 

namespace protobuf_samples_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_samples_2eproto
namespace edgify {
class AddSampleRequest;
class AddSampleRequestDefaultTypeInternal;
extern AddSampleRequestDefaultTypeInternal _AddSampleRequest_default_instance_;
class AddSampleResponse;
class AddSampleResponseDefaultTypeInternal;
extern AddSampleResponseDefaultTypeInternal _AddSampleResponse_default_instance_;
class DataSample;
class DataSampleDefaultTypeInternal;
extern DataSampleDefaultTypeInternal _DataSample_default_instance_;
class DeleteAllSamplesRequest;
class DeleteAllSamplesRequestDefaultTypeInternal;
extern DeleteAllSamplesRequestDefaultTypeInternal _DeleteAllSamplesRequest_default_instance_;
class DeleteAllSamplesResponse;
class DeleteAllSamplesResponseDefaultTypeInternal;
extern DeleteAllSamplesResponseDefaultTypeInternal _DeleteAllSamplesResponse_default_instance_;
class DeleteSampleRequest;
class DeleteSampleRequestDefaultTypeInternal;
extern DeleteSampleRequestDefaultTypeInternal _DeleteSampleRequest_default_instance_;
class DeleteSampleResponse;
class DeleteSampleResponseDefaultTypeInternal;
extern DeleteSampleResponseDefaultTypeInternal _DeleteSampleResponse_default_instance_;
class DeleteSamplesRequest;
class DeleteSamplesRequestDefaultTypeInternal;
extern DeleteSamplesRequestDefaultTypeInternal _DeleteSamplesRequest_default_instance_;
class DeleteSamplesResponse;
class DeleteSamplesResponseDefaultTypeInternal;
extern DeleteSamplesResponseDefaultTypeInternal _DeleteSamplesResponse_default_instance_;
class GetSamplesRequest;
class GetSamplesRequestDefaultTypeInternal;
extern GetSamplesRequestDefaultTypeInternal _GetSamplesRequest_default_instance_;
class GetSamplesResponse;
class GetSamplesResponseDefaultTypeInternal;
extern GetSamplesResponseDefaultTypeInternal _GetSamplesResponse_default_instance_;
class SyncRequest;
class SyncRequestDefaultTypeInternal;
extern SyncRequestDefaultTypeInternal _SyncRequest_default_instance_;
class SyncResponse;
class SyncResponseDefaultTypeInternal;
extern SyncResponseDefaultTypeInternal _SyncResponse_default_instance_;
class UpdateSampleRequest;
class UpdateSampleRequestDefaultTypeInternal;
extern UpdateSampleRequestDefaultTypeInternal _UpdateSampleRequest_default_instance_;
class UpdateSampleResponse;
class UpdateSampleResponseDefaultTypeInternal;
extern UpdateSampleResponseDefaultTypeInternal _UpdateSampleResponse_default_instance_;
}  // namespace edgify
namespace google {
namespace protobuf {
template<> ::edgify::AddSampleRequest* Arena::CreateMaybeMessage<::edgify::AddSampleRequest>(Arena*);
template<> ::edgify::AddSampleResponse* Arena::CreateMaybeMessage<::edgify::AddSampleResponse>(Arena*);
template<> ::edgify::DataSample* Arena::CreateMaybeMessage<::edgify::DataSample>(Arena*);
template<> ::edgify::DeleteAllSamplesRequest* Arena::CreateMaybeMessage<::edgify::DeleteAllSamplesRequest>(Arena*);
template<> ::edgify::DeleteAllSamplesResponse* Arena::CreateMaybeMessage<::edgify::DeleteAllSamplesResponse>(Arena*);
template<> ::edgify::DeleteSampleRequest* Arena::CreateMaybeMessage<::edgify::DeleteSampleRequest>(Arena*);
template<> ::edgify::DeleteSampleResponse* Arena::CreateMaybeMessage<::edgify::DeleteSampleResponse>(Arena*);
template<> ::edgify::DeleteSamplesRequest* Arena::CreateMaybeMessage<::edgify::DeleteSamplesRequest>(Arena*);
template<> ::edgify::DeleteSamplesResponse* Arena::CreateMaybeMessage<::edgify::DeleteSamplesResponse>(Arena*);
template<> ::edgify::GetSamplesRequest* Arena::CreateMaybeMessage<::edgify::GetSamplesRequest>(Arena*);
template<> ::edgify::GetSamplesResponse* Arena::CreateMaybeMessage<::edgify::GetSamplesResponse>(Arena*);
template<> ::edgify::SyncRequest* Arena::CreateMaybeMessage<::edgify::SyncRequest>(Arena*);
template<> ::edgify::SyncResponse* Arena::CreateMaybeMessage<::edgify::SyncResponse>(Arena*);
template<> ::edgify::UpdateSampleRequest* Arena::CreateMaybeMessage<::edgify::UpdateSampleRequest>(Arena*);
template<> ::edgify::UpdateSampleResponse* Arena::CreateMaybeMessage<::edgify::UpdateSampleResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace edgify {

// ===================================================================

class GetSamplesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.GetSamplesRequest) */ {
 public:
  GetSamplesRequest();
  virtual ~GetSamplesRequest();

  GetSamplesRequest(const GetSamplesRequest& from);

  inline GetSamplesRequest& operator=(const GetSamplesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSamplesRequest(GetSamplesRequest&& from) noexcept
    : GetSamplesRequest() {
    *this = ::std::move(from);
  }

  inline GetSamplesRequest& operator=(GetSamplesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSamplesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSamplesRequest* internal_default_instance() {
    return reinterpret_cast<const GetSamplesRequest*>(
               &_GetSamplesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetSamplesRequest* other);
  friend void swap(GetSamplesRequest& a, GetSamplesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSamplesRequest* New() const final {
    return CreateMaybeMessage<GetSamplesRequest>(NULL);
  }

  GetSamplesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetSamplesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetSamplesRequest& from);
  void MergeFrom(const GetSamplesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSamplesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:edgify.GetSamplesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetSamplesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.GetSamplesResponse) */ {
 public:
  GetSamplesResponse();
  virtual ~GetSamplesResponse();

  GetSamplesResponse(const GetSamplesResponse& from);

  inline GetSamplesResponse& operator=(const GetSamplesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSamplesResponse(GetSamplesResponse&& from) noexcept
    : GetSamplesResponse() {
    *this = ::std::move(from);
  }

  inline GetSamplesResponse& operator=(GetSamplesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSamplesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSamplesResponse* internal_default_instance() {
    return reinterpret_cast<const GetSamplesResponse*>(
               &_GetSamplesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetSamplesResponse* other);
  friend void swap(GetSamplesResponse& a, GetSamplesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSamplesResponse* New() const final {
    return CreateMaybeMessage<GetSamplesResponse>(NULL);
  }

  GetSamplesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetSamplesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetSamplesResponse& from);
  void MergeFrom(const GetSamplesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSamplesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .edgify.DataSample samples = 1;
  int samples_size() const;
  void clear_samples();
  static const int kSamplesFieldNumber = 1;
  ::edgify::DataSample* mutable_samples(int index);
  ::google::protobuf::RepeatedPtrField< ::edgify::DataSample >*
      mutable_samples();
  const ::edgify::DataSample& samples(int index) const;
  ::edgify::DataSample* add_samples();
  const ::google::protobuf::RepeatedPtrField< ::edgify::DataSample >&
      samples() const;

  // @@protoc_insertion_point(class_scope:edgify.GetSamplesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::edgify::DataSample > samples_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateSampleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.UpdateSampleRequest) */ {
 public:
  UpdateSampleRequest();
  virtual ~UpdateSampleRequest();

  UpdateSampleRequest(const UpdateSampleRequest& from);

  inline UpdateSampleRequest& operator=(const UpdateSampleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateSampleRequest(UpdateSampleRequest&& from) noexcept
    : UpdateSampleRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSampleRequest& operator=(UpdateSampleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSampleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSampleRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSampleRequest*>(
               &_UpdateSampleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UpdateSampleRequest* other);
  friend void swap(UpdateSampleRequest& a, UpdateSampleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateSampleRequest* New() const final {
    return CreateMaybeMessage<UpdateSampleRequest>(NULL);
  }

  UpdateSampleRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSampleRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateSampleRequest& from);
  void MergeFrom(const UpdateSampleRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSampleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .edgify.DataSample sample = 1;
  bool has_sample() const;
  void clear_sample();
  static const int kSampleFieldNumber = 1;
  private:
  const ::edgify::DataSample& _internal_sample() const;
  public:
  const ::edgify::DataSample& sample() const;
  ::edgify::DataSample* release_sample();
  ::edgify::DataSample* mutable_sample();
  void set_allocated_sample(::edgify::DataSample* sample);

  // @@protoc_insertion_point(class_scope:edgify.UpdateSampleRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::edgify::DataSample* sample_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateSampleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.UpdateSampleResponse) */ {
 public:
  UpdateSampleResponse();
  virtual ~UpdateSampleResponse();

  UpdateSampleResponse(const UpdateSampleResponse& from);

  inline UpdateSampleResponse& operator=(const UpdateSampleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateSampleResponse(UpdateSampleResponse&& from) noexcept
    : UpdateSampleResponse() {
    *this = ::std::move(from);
  }

  inline UpdateSampleResponse& operator=(UpdateSampleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSampleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSampleResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateSampleResponse*>(
               &_UpdateSampleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UpdateSampleResponse* other);
  friend void swap(UpdateSampleResponse& a, UpdateSampleResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateSampleResponse* New() const final {
    return CreateMaybeMessage<UpdateSampleResponse>(NULL);
  }

  UpdateSampleResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSampleResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateSampleResponse& from);
  void MergeFrom(const UpdateSampleResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSampleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .edgify.DataSample sample = 1;
  bool has_sample() const;
  void clear_sample();
  static const int kSampleFieldNumber = 1;
  private:
  const ::edgify::DataSample& _internal_sample() const;
  public:
  const ::edgify::DataSample& sample() const;
  ::edgify::DataSample* release_sample();
  ::edgify::DataSample* mutable_sample();
  void set_allocated_sample(::edgify::DataSample* sample);

  // @@protoc_insertion_point(class_scope:edgify.UpdateSampleResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::edgify::DataSample* sample_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddSampleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.AddSampleRequest) */ {
 public:
  AddSampleRequest();
  virtual ~AddSampleRequest();

  AddSampleRequest(const AddSampleRequest& from);

  inline AddSampleRequest& operator=(const AddSampleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddSampleRequest(AddSampleRequest&& from) noexcept
    : AddSampleRequest() {
    *this = ::std::move(from);
  }

  inline AddSampleRequest& operator=(AddSampleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddSampleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddSampleRequest* internal_default_instance() {
    return reinterpret_cast<const AddSampleRequest*>(
               &_AddSampleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AddSampleRequest* other);
  friend void swap(AddSampleRequest& a, AddSampleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddSampleRequest* New() const final {
    return CreateMaybeMessage<AddSampleRequest>(NULL);
  }

  AddSampleRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddSampleRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddSampleRequest& from);
  void MergeFrom(const AddSampleRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSampleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes file = 2;
  void clear_file();
  static const int kFileFieldNumber = 2;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const void* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // .edgify.DataSample sample = 1;
  bool has_sample() const;
  void clear_sample();
  static const int kSampleFieldNumber = 1;
  private:
  const ::edgify::DataSample& _internal_sample() const;
  public:
  const ::edgify::DataSample& sample() const;
  ::edgify::DataSample* release_sample();
  ::edgify::DataSample* mutable_sample();
  void set_allocated_sample(::edgify::DataSample* sample);

  // @@protoc_insertion_point(class_scope:edgify.AddSampleRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::edgify::DataSample* sample_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddSampleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.AddSampleResponse) */ {
 public:
  AddSampleResponse();
  virtual ~AddSampleResponse();

  AddSampleResponse(const AddSampleResponse& from);

  inline AddSampleResponse& operator=(const AddSampleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddSampleResponse(AddSampleResponse&& from) noexcept
    : AddSampleResponse() {
    *this = ::std::move(from);
  }

  inline AddSampleResponse& operator=(AddSampleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddSampleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddSampleResponse* internal_default_instance() {
    return reinterpret_cast<const AddSampleResponse*>(
               &_AddSampleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AddSampleResponse* other);
  friend void swap(AddSampleResponse& a, AddSampleResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddSampleResponse* New() const final {
    return CreateMaybeMessage<AddSampleResponse>(NULL);
  }

  AddSampleResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddSampleResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddSampleResponse& from);
  void MergeFrom(const AddSampleResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSampleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .edgify.DataSample sample = 1;
  bool has_sample() const;
  void clear_sample();
  static const int kSampleFieldNumber = 1;
  private:
  const ::edgify::DataSample& _internal_sample() const;
  public:
  const ::edgify::DataSample& sample() const;
  ::edgify::DataSample* release_sample();
  ::edgify::DataSample* mutable_sample();
  void set_allocated_sample(::edgify::DataSample* sample);

  // @@protoc_insertion_point(class_scope:edgify.AddSampleResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::edgify::DataSample* sample_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataSample : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.DataSample) */ {
 public:
  DataSample();
  virtual ~DataSample();

  DataSample(const DataSample& from);

  inline DataSample& operator=(const DataSample& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataSample(DataSample&& from) noexcept
    : DataSample() {
    *this = ::std::move(from);
  }

  inline DataSample& operator=(DataSample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSample* internal_default_instance() {
    return reinterpret_cast<const DataSample*>(
               &_DataSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DataSample* other);
  friend void swap(DataSample& a, DataSample& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataSample* New() const final {
    return CreateMaybeMessage<DataSample>(NULL);
  }

  DataSample* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataSample>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataSample& from);
  void MergeFrom(const DataSample& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSample* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string label = 3;
  void clear_label();
  static const int kLabelFieldNumber = 3;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // string dataset_type = 6;
  void clear_dataset_type();
  static const int kDatasetTypeFieldNumber = 6;
  const ::std::string& dataset_type() const;
  void set_dataset_type(const ::std::string& value);
  #if LANG_CXX11
  void set_dataset_type(::std::string&& value);
  #endif
  void set_dataset_type(const char* value);
  void set_dataset_type(const char* value, size_t size);
  ::std::string* mutable_dataset_type();
  ::std::string* release_dataset_type();
  void set_allocated_dataset_type(::std::string* dataset_type);

  // string group_id = 8;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 8;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // .google.protobuf.Timestamp created_at = 7;
  bool has_created_at() const;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_created_at() const;
  public:
  const ::google::protobuf::Timestamp& created_at() const;
  ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* created_at);

  // uint64 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // bool opened = 5;
  void clear_opened();
  static const int kOpenedFieldNumber = 5;
  bool opened() const;
  void set_opened(bool value);

  // @@protoc_insertion_point(class_scope:edgify.DataSample)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr dataset_type_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::Timestamp* created_at_;
  ::google::protobuf::uint64 size_;
  bool opened_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.SyncRequest) */ {
 public:
  SyncRequest();
  virtual ~SyncRequest();

  SyncRequest(const SyncRequest& from);

  inline SyncRequest& operator=(const SyncRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncRequest(SyncRequest&& from) noexcept
    : SyncRequest() {
    *this = ::std::move(from);
  }

  inline SyncRequest& operator=(SyncRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncRequest* internal_default_instance() {
    return reinterpret_cast<const SyncRequest*>(
               &_SyncRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SyncRequest* other);
  friend void swap(SyncRequest& a, SyncRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncRequest* New() const final {
    return CreateMaybeMessage<SyncRequest>(NULL);
  }

  SyncRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncRequest& from);
  void MergeFrom(const SyncRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:edgify.SyncRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.SyncResponse) */ {
 public:
  SyncResponse();
  virtual ~SyncResponse();

  SyncResponse(const SyncResponse& from);

  inline SyncResponse& operator=(const SyncResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncResponse(SyncResponse&& from) noexcept
    : SyncResponse() {
    *this = ::std::move(from);
  }

  inline SyncResponse& operator=(SyncResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncResponse* internal_default_instance() {
    return reinterpret_cast<const SyncResponse*>(
               &_SyncResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SyncResponse* other);
  friend void swap(SyncResponse& a, SyncResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncResponse* New() const final {
    return CreateMaybeMessage<SyncResponse>(NULL);
  }

  SyncResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncResponse& from);
  void MergeFrom(const SyncResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:edgify.SyncResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteAllSamplesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.DeleteAllSamplesRequest) */ {
 public:
  DeleteAllSamplesRequest();
  virtual ~DeleteAllSamplesRequest();

  DeleteAllSamplesRequest(const DeleteAllSamplesRequest& from);

  inline DeleteAllSamplesRequest& operator=(const DeleteAllSamplesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteAllSamplesRequest(DeleteAllSamplesRequest&& from) noexcept
    : DeleteAllSamplesRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAllSamplesRequest& operator=(DeleteAllSamplesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteAllSamplesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAllSamplesRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAllSamplesRequest*>(
               &_DeleteAllSamplesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DeleteAllSamplesRequest* other);
  friend void swap(DeleteAllSamplesRequest& a, DeleteAllSamplesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteAllSamplesRequest* New() const final {
    return CreateMaybeMessage<DeleteAllSamplesRequest>(NULL);
  }

  DeleteAllSamplesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAllSamplesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteAllSamplesRequest& from);
  void MergeFrom(const DeleteAllSamplesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAllSamplesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:edgify.DeleteAllSamplesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteAllSamplesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.DeleteAllSamplesResponse) */ {
 public:
  DeleteAllSamplesResponse();
  virtual ~DeleteAllSamplesResponse();

  DeleteAllSamplesResponse(const DeleteAllSamplesResponse& from);

  inline DeleteAllSamplesResponse& operator=(const DeleteAllSamplesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteAllSamplesResponse(DeleteAllSamplesResponse&& from) noexcept
    : DeleteAllSamplesResponse() {
    *this = ::std::move(from);
  }

  inline DeleteAllSamplesResponse& operator=(DeleteAllSamplesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteAllSamplesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAllSamplesResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteAllSamplesResponse*>(
               &_DeleteAllSamplesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(DeleteAllSamplesResponse* other);
  friend void swap(DeleteAllSamplesResponse& a, DeleteAllSamplesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteAllSamplesResponse* New() const final {
    return CreateMaybeMessage<DeleteAllSamplesResponse>(NULL);
  }

  DeleteAllSamplesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAllSamplesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteAllSamplesResponse& from);
  void MergeFrom(const DeleteAllSamplesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAllSamplesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:edgify.DeleteAllSamplesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteSamplesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.DeleteSamplesRequest) */ {
 public:
  DeleteSamplesRequest();
  virtual ~DeleteSamplesRequest();

  DeleteSamplesRequest(const DeleteSamplesRequest& from);

  inline DeleteSamplesRequest& operator=(const DeleteSamplesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteSamplesRequest(DeleteSamplesRequest&& from) noexcept
    : DeleteSamplesRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSamplesRequest& operator=(DeleteSamplesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSamplesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSamplesRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSamplesRequest*>(
               &_DeleteSamplesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(DeleteSamplesRequest* other);
  friend void swap(DeleteSamplesRequest& a, DeleteSamplesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteSamplesRequest* New() const final {
    return CreateMaybeMessage<DeleteSamplesRequest>(NULL);
  }

  DeleteSamplesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSamplesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteSamplesRequest& from);
  void MergeFrom(const DeleteSamplesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSamplesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string uuids = 1;
  int uuids_size() const;
  void clear_uuids();
  static const int kUuidsFieldNumber = 1;
  const ::std::string& uuids(int index) const;
  ::std::string* mutable_uuids(int index);
  void set_uuids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_uuids(int index, ::std::string&& value);
  #endif
  void set_uuids(int index, const char* value);
  void set_uuids(int index, const char* value, size_t size);
  ::std::string* add_uuids();
  void add_uuids(const ::std::string& value);
  #if LANG_CXX11
  void add_uuids(::std::string&& value);
  #endif
  void add_uuids(const char* value);
  void add_uuids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& uuids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_uuids();

  // @@protoc_insertion_point(class_scope:edgify.DeleteSamplesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> uuids_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteSampleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.DeleteSampleResponse) */ {
 public:
  DeleteSampleResponse();
  virtual ~DeleteSampleResponse();

  DeleteSampleResponse(const DeleteSampleResponse& from);

  inline DeleteSampleResponse& operator=(const DeleteSampleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteSampleResponse(DeleteSampleResponse&& from) noexcept
    : DeleteSampleResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSampleResponse& operator=(DeleteSampleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSampleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSampleResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSampleResponse*>(
               &_DeleteSampleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(DeleteSampleResponse* other);
  friend void swap(DeleteSampleResponse& a, DeleteSampleResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteSampleResponse* New() const final {
    return CreateMaybeMessage<DeleteSampleResponse>(NULL);
  }

  DeleteSampleResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSampleResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteSampleResponse& from);
  void MergeFrom(const DeleteSampleResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSampleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:edgify.DeleteSampleResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteSampleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.DeleteSampleRequest) */ {
 public:
  DeleteSampleRequest();
  virtual ~DeleteSampleRequest();

  DeleteSampleRequest(const DeleteSampleRequest& from);

  inline DeleteSampleRequest& operator=(const DeleteSampleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteSampleRequest(DeleteSampleRequest&& from) noexcept
    : DeleteSampleRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSampleRequest& operator=(DeleteSampleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSampleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSampleRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSampleRequest*>(
               &_DeleteSampleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(DeleteSampleRequest* other);
  friend void swap(DeleteSampleRequest& a, DeleteSampleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteSampleRequest* New() const final {
    return CreateMaybeMessage<DeleteSampleRequest>(NULL);
  }

  DeleteSampleRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSampleRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteSampleRequest& from);
  void MergeFrom(const DeleteSampleRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSampleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:edgify.DeleteSampleRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteSamplesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.DeleteSamplesResponse) */ {
 public:
  DeleteSamplesResponse();
  virtual ~DeleteSamplesResponse();

  DeleteSamplesResponse(const DeleteSamplesResponse& from);

  inline DeleteSamplesResponse& operator=(const DeleteSamplesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteSamplesResponse(DeleteSamplesResponse&& from) noexcept
    : DeleteSamplesResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSamplesResponse& operator=(DeleteSamplesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSamplesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSamplesResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSamplesResponse*>(
               &_DeleteSamplesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(DeleteSamplesResponse* other);
  friend void swap(DeleteSamplesResponse& a, DeleteSamplesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteSamplesResponse* New() const final {
    return CreateMaybeMessage<DeleteSamplesResponse>(NULL);
  }

  DeleteSamplesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSamplesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteSamplesResponse& from);
  void MergeFrom(const DeleteSamplesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSamplesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:edgify.DeleteSamplesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_samples_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetSamplesRequest

// -------------------------------------------------------------------

// GetSamplesResponse

// repeated .edgify.DataSample samples = 1;
inline int GetSamplesResponse::samples_size() const {
  return samples_.size();
}
inline void GetSamplesResponse::clear_samples() {
  samples_.Clear();
}
inline ::edgify::DataSample* GetSamplesResponse::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:edgify.GetSamplesResponse.samples)
  return samples_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::edgify::DataSample >*
GetSamplesResponse::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:edgify.GetSamplesResponse.samples)
  return &samples_;
}
inline const ::edgify::DataSample& GetSamplesResponse::samples(int index) const {
  // @@protoc_insertion_point(field_get:edgify.GetSamplesResponse.samples)
  return samples_.Get(index);
}
inline ::edgify::DataSample* GetSamplesResponse::add_samples() {
  // @@protoc_insertion_point(field_add:edgify.GetSamplesResponse.samples)
  return samples_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edgify::DataSample >&
GetSamplesResponse::samples() const {
  // @@protoc_insertion_point(field_list:edgify.GetSamplesResponse.samples)
  return samples_;
}

// -------------------------------------------------------------------

// UpdateSampleRequest

// .edgify.DataSample sample = 1;
inline bool UpdateSampleRequest::has_sample() const {
  return this != internal_default_instance() && sample_ != NULL;
}
inline void UpdateSampleRequest::clear_sample() {
  if (GetArenaNoVirtual() == NULL && sample_ != NULL) {
    delete sample_;
  }
  sample_ = NULL;
}
inline const ::edgify::DataSample& UpdateSampleRequest::_internal_sample() const {
  return *sample_;
}
inline const ::edgify::DataSample& UpdateSampleRequest::sample() const {
  const ::edgify::DataSample* p = sample_;
  // @@protoc_insertion_point(field_get:edgify.UpdateSampleRequest.sample)
  return p != NULL ? *p : *reinterpret_cast<const ::edgify::DataSample*>(
      &::edgify::_DataSample_default_instance_);
}
inline ::edgify::DataSample* UpdateSampleRequest::release_sample() {
  // @@protoc_insertion_point(field_release:edgify.UpdateSampleRequest.sample)
  
  ::edgify::DataSample* temp = sample_;
  sample_ = NULL;
  return temp;
}
inline ::edgify::DataSample* UpdateSampleRequest::mutable_sample() {
  
  if (sample_ == NULL) {
    auto* p = CreateMaybeMessage<::edgify::DataSample>(GetArenaNoVirtual());
    sample_ = p;
  }
  // @@protoc_insertion_point(field_mutable:edgify.UpdateSampleRequest.sample)
  return sample_;
}
inline void UpdateSampleRequest::set_allocated_sample(::edgify::DataSample* sample) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sample_;
  }
  if (sample) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sample = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sample, submessage_arena);
    }
    
  } else {
    
  }
  sample_ = sample;
  // @@protoc_insertion_point(field_set_allocated:edgify.UpdateSampleRequest.sample)
}

// -------------------------------------------------------------------

// UpdateSampleResponse

// .edgify.DataSample sample = 1;
inline bool UpdateSampleResponse::has_sample() const {
  return this != internal_default_instance() && sample_ != NULL;
}
inline void UpdateSampleResponse::clear_sample() {
  if (GetArenaNoVirtual() == NULL && sample_ != NULL) {
    delete sample_;
  }
  sample_ = NULL;
}
inline const ::edgify::DataSample& UpdateSampleResponse::_internal_sample() const {
  return *sample_;
}
inline const ::edgify::DataSample& UpdateSampleResponse::sample() const {
  const ::edgify::DataSample* p = sample_;
  // @@protoc_insertion_point(field_get:edgify.UpdateSampleResponse.sample)
  return p != NULL ? *p : *reinterpret_cast<const ::edgify::DataSample*>(
      &::edgify::_DataSample_default_instance_);
}
inline ::edgify::DataSample* UpdateSampleResponse::release_sample() {
  // @@protoc_insertion_point(field_release:edgify.UpdateSampleResponse.sample)
  
  ::edgify::DataSample* temp = sample_;
  sample_ = NULL;
  return temp;
}
inline ::edgify::DataSample* UpdateSampleResponse::mutable_sample() {
  
  if (sample_ == NULL) {
    auto* p = CreateMaybeMessage<::edgify::DataSample>(GetArenaNoVirtual());
    sample_ = p;
  }
  // @@protoc_insertion_point(field_mutable:edgify.UpdateSampleResponse.sample)
  return sample_;
}
inline void UpdateSampleResponse::set_allocated_sample(::edgify::DataSample* sample) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sample_;
  }
  if (sample) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sample = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sample, submessage_arena);
    }
    
  } else {
    
  }
  sample_ = sample;
  // @@protoc_insertion_point(field_set_allocated:edgify.UpdateSampleResponse.sample)
}

// -------------------------------------------------------------------

// AddSampleRequest

// .edgify.DataSample sample = 1;
inline bool AddSampleRequest::has_sample() const {
  return this != internal_default_instance() && sample_ != NULL;
}
inline void AddSampleRequest::clear_sample() {
  if (GetArenaNoVirtual() == NULL && sample_ != NULL) {
    delete sample_;
  }
  sample_ = NULL;
}
inline const ::edgify::DataSample& AddSampleRequest::_internal_sample() const {
  return *sample_;
}
inline const ::edgify::DataSample& AddSampleRequest::sample() const {
  const ::edgify::DataSample* p = sample_;
  // @@protoc_insertion_point(field_get:edgify.AddSampleRequest.sample)
  return p != NULL ? *p : *reinterpret_cast<const ::edgify::DataSample*>(
      &::edgify::_DataSample_default_instance_);
}
inline ::edgify::DataSample* AddSampleRequest::release_sample() {
  // @@protoc_insertion_point(field_release:edgify.AddSampleRequest.sample)
  
  ::edgify::DataSample* temp = sample_;
  sample_ = NULL;
  return temp;
}
inline ::edgify::DataSample* AddSampleRequest::mutable_sample() {
  
  if (sample_ == NULL) {
    auto* p = CreateMaybeMessage<::edgify::DataSample>(GetArenaNoVirtual());
    sample_ = p;
  }
  // @@protoc_insertion_point(field_mutable:edgify.AddSampleRequest.sample)
  return sample_;
}
inline void AddSampleRequest::set_allocated_sample(::edgify::DataSample* sample) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sample_;
  }
  if (sample) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sample = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sample, submessage_arena);
    }
    
  } else {
    
  }
  sample_ = sample;
  // @@protoc_insertion_point(field_set_allocated:edgify.AddSampleRequest.sample)
}

// bytes file = 2;
inline void AddSampleRequest::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddSampleRequest::file() const {
  // @@protoc_insertion_point(field_get:edgify.AddSampleRequest.file)
  return file_.GetNoArena();
}
inline void AddSampleRequest::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.AddSampleRequest.file)
}
#if LANG_CXX11
inline void AddSampleRequest::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.AddSampleRequest.file)
}
#endif
inline void AddSampleRequest::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.AddSampleRequest.file)
}
inline void AddSampleRequest::set_file(const void* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.AddSampleRequest.file)
}
inline ::std::string* AddSampleRequest::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:edgify.AddSampleRequest.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddSampleRequest::release_file() {
  // @@protoc_insertion_point(field_release:edgify.AddSampleRequest.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddSampleRequest::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:edgify.AddSampleRequest.file)
}

// -------------------------------------------------------------------

// AddSampleResponse

// .edgify.DataSample sample = 1;
inline bool AddSampleResponse::has_sample() const {
  return this != internal_default_instance() && sample_ != NULL;
}
inline void AddSampleResponse::clear_sample() {
  if (GetArenaNoVirtual() == NULL && sample_ != NULL) {
    delete sample_;
  }
  sample_ = NULL;
}
inline const ::edgify::DataSample& AddSampleResponse::_internal_sample() const {
  return *sample_;
}
inline const ::edgify::DataSample& AddSampleResponse::sample() const {
  const ::edgify::DataSample* p = sample_;
  // @@protoc_insertion_point(field_get:edgify.AddSampleResponse.sample)
  return p != NULL ? *p : *reinterpret_cast<const ::edgify::DataSample*>(
      &::edgify::_DataSample_default_instance_);
}
inline ::edgify::DataSample* AddSampleResponse::release_sample() {
  // @@protoc_insertion_point(field_release:edgify.AddSampleResponse.sample)
  
  ::edgify::DataSample* temp = sample_;
  sample_ = NULL;
  return temp;
}
inline ::edgify::DataSample* AddSampleResponse::mutable_sample() {
  
  if (sample_ == NULL) {
    auto* p = CreateMaybeMessage<::edgify::DataSample>(GetArenaNoVirtual());
    sample_ = p;
  }
  // @@protoc_insertion_point(field_mutable:edgify.AddSampleResponse.sample)
  return sample_;
}
inline void AddSampleResponse::set_allocated_sample(::edgify::DataSample* sample) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sample_;
  }
  if (sample) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sample = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sample, submessage_arena);
    }
    
  } else {
    
  }
  sample_ = sample;
  // @@protoc_insertion_point(field_set_allocated:edgify.AddSampleResponse.sample)
}

// -------------------------------------------------------------------

// DataSample

// string uuid = 1;
inline void DataSample::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSample::uuid() const {
  // @@protoc_insertion_point(field_get:edgify.DataSample.uuid)
  return uuid_.GetNoArena();
}
inline void DataSample::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.DataSample.uuid)
}
#if LANG_CXX11
inline void DataSample::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.DataSample.uuid)
}
#endif
inline void DataSample::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.DataSample.uuid)
}
inline void DataSample::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.DataSample.uuid)
}
inline ::std::string* DataSample::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:edgify.DataSample.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSample::release_uuid() {
  // @@protoc_insertion_point(field_release:edgify.DataSample.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSample::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:edgify.DataSample.uuid)
}

// string path = 2;
inline void DataSample::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSample::path() const {
  // @@protoc_insertion_point(field_get:edgify.DataSample.path)
  return path_.GetNoArena();
}
inline void DataSample::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.DataSample.path)
}
#if LANG_CXX11
inline void DataSample::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.DataSample.path)
}
#endif
inline void DataSample::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.DataSample.path)
}
inline void DataSample::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.DataSample.path)
}
inline ::std::string* DataSample::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:edgify.DataSample.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSample::release_path() {
  // @@protoc_insertion_point(field_release:edgify.DataSample.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSample::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:edgify.DataSample.path)
}

// string label = 3;
inline void DataSample::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSample::label() const {
  // @@protoc_insertion_point(field_get:edgify.DataSample.label)
  return label_.GetNoArena();
}
inline void DataSample::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.DataSample.label)
}
#if LANG_CXX11
inline void DataSample::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.DataSample.label)
}
#endif
inline void DataSample::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.DataSample.label)
}
inline void DataSample::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.DataSample.label)
}
inline ::std::string* DataSample::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:edgify.DataSample.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSample::release_label() {
  // @@protoc_insertion_point(field_release:edgify.DataSample.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSample::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:edgify.DataSample.label)
}

// uint64 size = 4;
inline void DataSample::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DataSample::size() const {
  // @@protoc_insertion_point(field_get:edgify.DataSample.size)
  return size_;
}
inline void DataSample::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:edgify.DataSample.size)
}

// bool opened = 5;
inline void DataSample::clear_opened() {
  opened_ = false;
}
inline bool DataSample::opened() const {
  // @@protoc_insertion_point(field_get:edgify.DataSample.opened)
  return opened_;
}
inline void DataSample::set_opened(bool value) {
  
  opened_ = value;
  // @@protoc_insertion_point(field_set:edgify.DataSample.opened)
}

// string dataset_type = 6;
inline void DataSample::clear_dataset_type() {
  dataset_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSample::dataset_type() const {
  // @@protoc_insertion_point(field_get:edgify.DataSample.dataset_type)
  return dataset_type_.GetNoArena();
}
inline void DataSample::set_dataset_type(const ::std::string& value) {
  
  dataset_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.DataSample.dataset_type)
}
#if LANG_CXX11
inline void DataSample::set_dataset_type(::std::string&& value) {
  
  dataset_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.DataSample.dataset_type)
}
#endif
inline void DataSample::set_dataset_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dataset_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.DataSample.dataset_type)
}
inline void DataSample::set_dataset_type(const char* value, size_t size) {
  
  dataset_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.DataSample.dataset_type)
}
inline ::std::string* DataSample::mutable_dataset_type() {
  
  // @@protoc_insertion_point(field_mutable:edgify.DataSample.dataset_type)
  return dataset_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSample::release_dataset_type() {
  // @@protoc_insertion_point(field_release:edgify.DataSample.dataset_type)
  
  return dataset_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSample::set_allocated_dataset_type(::std::string* dataset_type) {
  if (dataset_type != NULL) {
    
  } else {
    
  }
  dataset_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_type);
  // @@protoc_insertion_point(field_set_allocated:edgify.DataSample.dataset_type)
}

// .google.protobuf.Timestamp created_at = 7;
inline bool DataSample::has_created_at() const {
  return this != internal_default_instance() && created_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& DataSample::_internal_created_at() const {
  return *created_at_;
}
inline const ::google::protobuf::Timestamp& DataSample::created_at() const {
  const ::google::protobuf::Timestamp* p = created_at_;
  // @@protoc_insertion_point(field_get:edgify.DataSample.created_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DataSample::release_created_at() {
  // @@protoc_insertion_point(field_release:edgify.DataSample.created_at)
  
  ::google::protobuf::Timestamp* temp = created_at_;
  created_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DataSample::mutable_created_at() {
  
  if (created_at_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:edgify.DataSample.created_at)
  return created_at_;
}
inline void DataSample::set_allocated_created_at(::google::protobuf::Timestamp* created_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:edgify.DataSample.created_at)
}

// string group_id = 8;
inline void DataSample::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSample::group_id() const {
  // @@protoc_insertion_point(field_get:edgify.DataSample.group_id)
  return group_id_.GetNoArena();
}
inline void DataSample::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.DataSample.group_id)
}
#if LANG_CXX11
inline void DataSample::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.DataSample.group_id)
}
#endif
inline void DataSample::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.DataSample.group_id)
}
inline void DataSample::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.DataSample.group_id)
}
inline ::std::string* DataSample::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:edgify.DataSample.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSample::release_group_id() {
  // @@protoc_insertion_point(field_release:edgify.DataSample.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSample::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:edgify.DataSample.group_id)
}

// -------------------------------------------------------------------

// SyncRequest

// -------------------------------------------------------------------

// SyncResponse

// -------------------------------------------------------------------

// DeleteAllSamplesRequest

// -------------------------------------------------------------------

// DeleteAllSamplesResponse

// -------------------------------------------------------------------

// DeleteSamplesRequest

// repeated string uuids = 1;
inline int DeleteSamplesRequest::uuids_size() const {
  return uuids_.size();
}
inline void DeleteSamplesRequest::clear_uuids() {
  uuids_.Clear();
}
inline const ::std::string& DeleteSamplesRequest::uuids(int index) const {
  // @@protoc_insertion_point(field_get:edgify.DeleteSamplesRequest.uuids)
  return uuids_.Get(index);
}
inline ::std::string* DeleteSamplesRequest::mutable_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:edgify.DeleteSamplesRequest.uuids)
  return uuids_.Mutable(index);
}
inline void DeleteSamplesRequest::set_uuids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:edgify.DeleteSamplesRequest.uuids)
  uuids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeleteSamplesRequest::set_uuids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:edgify.DeleteSamplesRequest.uuids)
  uuids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeleteSamplesRequest::set_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:edgify.DeleteSamplesRequest.uuids)
}
inline void DeleteSamplesRequest::set_uuids(int index, const char* value, size_t size) {
  uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edgify.DeleteSamplesRequest.uuids)
}
inline ::std::string* DeleteSamplesRequest::add_uuids() {
  // @@protoc_insertion_point(field_add_mutable:edgify.DeleteSamplesRequest.uuids)
  return uuids_.Add();
}
inline void DeleteSamplesRequest::add_uuids(const ::std::string& value) {
  uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:edgify.DeleteSamplesRequest.uuids)
}
#if LANG_CXX11
inline void DeleteSamplesRequest::add_uuids(::std::string&& value) {
  uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:edgify.DeleteSamplesRequest.uuids)
}
#endif
inline void DeleteSamplesRequest::add_uuids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:edgify.DeleteSamplesRequest.uuids)
}
inline void DeleteSamplesRequest::add_uuids(const char* value, size_t size) {
  uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:edgify.DeleteSamplesRequest.uuids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteSamplesRequest::uuids() const {
  // @@protoc_insertion_point(field_list:edgify.DeleteSamplesRequest.uuids)
  return uuids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteSamplesRequest::mutable_uuids() {
  // @@protoc_insertion_point(field_mutable_list:edgify.DeleteSamplesRequest.uuids)
  return &uuids_;
}

// -------------------------------------------------------------------

// DeleteSampleResponse

// -------------------------------------------------------------------

// DeleteSampleRequest

// string uuid = 1;
inline void DeleteSampleRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteSampleRequest::uuid() const {
  // @@protoc_insertion_point(field_get:edgify.DeleteSampleRequest.uuid)
  return uuid_.GetNoArena();
}
inline void DeleteSampleRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.DeleteSampleRequest.uuid)
}
#if LANG_CXX11
inline void DeleteSampleRequest::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.DeleteSampleRequest.uuid)
}
#endif
inline void DeleteSampleRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.DeleteSampleRequest.uuid)
}
inline void DeleteSampleRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.DeleteSampleRequest.uuid)
}
inline ::std::string* DeleteSampleRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:edgify.DeleteSampleRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteSampleRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:edgify.DeleteSampleRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteSampleRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:edgify.DeleteSampleRequest.uuid)
}

// -------------------------------------------------------------------

// DeleteSamplesResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace edgify

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_samples_2eproto

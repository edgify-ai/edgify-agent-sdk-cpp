// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: samples.proto

#include "samples.pb.h"
#include "samples.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace edgify {

static const char* SamplesService_method_names[] = {
  "/edgify.SamplesService/GetSamples",
  "/edgify.SamplesService/AddSample",
  "/edgify.SamplesService/UpdateSample",
  "/edgify.SamplesService/Sync",
  "/edgify.SamplesService/DeleteAllSamples",
  "/edgify.SamplesService/DeleteSamples",
  "/edgify.SamplesService/DeleteSample",
};

std::unique_ptr< SamplesService::Stub> SamplesService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SamplesService::Stub> stub(new SamplesService::Stub(channel, options));
  return stub;
}

SamplesService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetSamples_(SamplesService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddSample_(SamplesService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSample_(SamplesService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Sync_(SamplesService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAllSamples_(SamplesService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSamples_(SamplesService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSample_(SamplesService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SamplesService::Stub::GetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest& request, ::edgify::GetSamplesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::edgify::GetSamplesRequest, ::edgify::GetSamplesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSamples_, context, request, response);
}

void SamplesService::Stub::experimental_async::GetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest* request, ::edgify::GetSamplesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::edgify::GetSamplesRequest, ::edgify::GetSamplesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSamples_, context, request, response, std::move(f));
}

void SamplesService::Stub::experimental_async::GetSamples(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest* request, ::edgify::GetSamplesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSamples_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::edgify::GetSamplesResponse>* SamplesService::Stub::PrepareAsyncGetSamplesRaw(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::edgify::GetSamplesResponse, ::edgify::GetSamplesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSamples_, context, request);
}

::grpc::ClientAsyncResponseReader< ::edgify::GetSamplesResponse>* SamplesService::Stub::AsyncGetSamplesRaw(::grpc::ClientContext* context, const ::edgify::GetSamplesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSamplesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SamplesService::Stub::AddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest& request, ::edgify::AddSampleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::edgify::AddSampleRequest, ::edgify::AddSampleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddSample_, context, request, response);
}

void SamplesService::Stub::experimental_async::AddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest* request, ::edgify::AddSampleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::edgify::AddSampleRequest, ::edgify::AddSampleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddSample_, context, request, response, std::move(f));
}

void SamplesService::Stub::experimental_async::AddSample(::grpc::ClientContext* context, const ::edgify::AddSampleRequest* request, ::edgify::AddSampleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddSample_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::edgify::AddSampleResponse>* SamplesService::Stub::PrepareAsyncAddSampleRaw(::grpc::ClientContext* context, const ::edgify::AddSampleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::edgify::AddSampleResponse, ::edgify::AddSampleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddSample_, context, request);
}

::grpc::ClientAsyncResponseReader< ::edgify::AddSampleResponse>* SamplesService::Stub::AsyncAddSampleRaw(::grpc::ClientContext* context, const ::edgify::AddSampleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddSampleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SamplesService::Stub::UpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest& request, ::edgify::UpdateSampleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::edgify::UpdateSampleRequest, ::edgify::UpdateSampleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSample_, context, request, response);
}

void SamplesService::Stub::experimental_async::UpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest* request, ::edgify::UpdateSampleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::edgify::UpdateSampleRequest, ::edgify::UpdateSampleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSample_, context, request, response, std::move(f));
}

void SamplesService::Stub::experimental_async::UpdateSample(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest* request, ::edgify::UpdateSampleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSample_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::edgify::UpdateSampleResponse>* SamplesService::Stub::PrepareAsyncUpdateSampleRaw(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::edgify::UpdateSampleResponse, ::edgify::UpdateSampleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSample_, context, request);
}

::grpc::ClientAsyncResponseReader< ::edgify::UpdateSampleResponse>* SamplesService::Stub::AsyncUpdateSampleRaw(::grpc::ClientContext* context, const ::edgify::UpdateSampleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSampleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SamplesService::Stub::Sync(::grpc::ClientContext* context, const ::edgify::SyncRequest& request, ::edgify::SyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::edgify::SyncRequest, ::edgify::SyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Sync_, context, request, response);
}

void SamplesService::Stub::experimental_async::Sync(::grpc::ClientContext* context, const ::edgify::SyncRequest* request, ::edgify::SyncResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::edgify::SyncRequest, ::edgify::SyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sync_, context, request, response, std::move(f));
}

void SamplesService::Stub::experimental_async::Sync(::grpc::ClientContext* context, const ::edgify::SyncRequest* request, ::edgify::SyncResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::edgify::SyncResponse>* SamplesService::Stub::PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::edgify::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::edgify::SyncResponse, ::edgify::SyncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Sync_, context, request);
}

::grpc::ClientAsyncResponseReader< ::edgify::SyncResponse>* SamplesService::Stub::AsyncSyncRaw(::grpc::ClientContext* context, const ::edgify::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSyncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SamplesService::Stub::DeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest& request, ::edgify::DeleteAllSamplesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::edgify::DeleteAllSamplesRequest, ::edgify::DeleteAllSamplesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteAllSamples_, context, request, response);
}

void SamplesService::Stub::experimental_async::DeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest* request, ::edgify::DeleteAllSamplesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::edgify::DeleteAllSamplesRequest, ::edgify::DeleteAllSamplesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAllSamples_, context, request, response, std::move(f));
}

void SamplesService::Stub::experimental_async::DeleteAllSamples(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest* request, ::edgify::DeleteAllSamplesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAllSamples_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::edgify::DeleteAllSamplesResponse>* SamplesService::Stub::PrepareAsyncDeleteAllSamplesRaw(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::edgify::DeleteAllSamplesResponse, ::edgify::DeleteAllSamplesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteAllSamples_, context, request);
}

::grpc::ClientAsyncResponseReader< ::edgify::DeleteAllSamplesResponse>* SamplesService::Stub::AsyncDeleteAllSamplesRaw(::grpc::ClientContext* context, const ::edgify::DeleteAllSamplesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteAllSamplesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SamplesService::Stub::DeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest& request, ::edgify::DeleteSamplesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::edgify::DeleteSamplesRequest, ::edgify::DeleteSamplesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSamples_, context, request, response);
}

void SamplesService::Stub::experimental_async::DeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest* request, ::edgify::DeleteSamplesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::edgify::DeleteSamplesRequest, ::edgify::DeleteSamplesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSamples_, context, request, response, std::move(f));
}

void SamplesService::Stub::experimental_async::DeleteSamples(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest* request, ::edgify::DeleteSamplesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSamples_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::edgify::DeleteSamplesResponse>* SamplesService::Stub::PrepareAsyncDeleteSamplesRaw(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::edgify::DeleteSamplesResponse, ::edgify::DeleteSamplesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSamples_, context, request);
}

::grpc::ClientAsyncResponseReader< ::edgify::DeleteSamplesResponse>* SamplesService::Stub::AsyncDeleteSamplesRaw(::grpc::ClientContext* context, const ::edgify::DeleteSamplesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSamplesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SamplesService::Stub::DeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest& request, ::edgify::DeleteSampleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::edgify::DeleteSampleRequest, ::edgify::DeleteSampleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSample_, context, request, response);
}

void SamplesService::Stub::experimental_async::DeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest* request, ::edgify::DeleteSampleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::edgify::DeleteSampleRequest, ::edgify::DeleteSampleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSample_, context, request, response, std::move(f));
}

void SamplesService::Stub::experimental_async::DeleteSample(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest* request, ::edgify::DeleteSampleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSample_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::edgify::DeleteSampleResponse>* SamplesService::Stub::PrepareAsyncDeleteSampleRaw(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::edgify::DeleteSampleResponse, ::edgify::DeleteSampleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSample_, context, request);
}

::grpc::ClientAsyncResponseReader< ::edgify::DeleteSampleResponse>* SamplesService::Stub::AsyncDeleteSampleRaw(::grpc::ClientContext* context, const ::edgify::DeleteSampleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSampleRaw(context, request, cq);
  result->StartCall();
  return result;
}

SamplesService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SamplesService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SamplesService::Service, ::edgify::GetSamplesRequest, ::edgify::GetSamplesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SamplesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::edgify::GetSamplesRequest* req,
             ::edgify::GetSamplesResponse* resp) {
               return service->GetSamples(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SamplesService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SamplesService::Service, ::edgify::AddSampleRequest, ::edgify::AddSampleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SamplesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::edgify::AddSampleRequest* req,
             ::edgify::AddSampleResponse* resp) {
               return service->AddSample(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SamplesService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SamplesService::Service, ::edgify::UpdateSampleRequest, ::edgify::UpdateSampleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SamplesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::edgify::UpdateSampleRequest* req,
             ::edgify::UpdateSampleResponse* resp) {
               return service->UpdateSample(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SamplesService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SamplesService::Service, ::edgify::SyncRequest, ::edgify::SyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SamplesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::edgify::SyncRequest* req,
             ::edgify::SyncResponse* resp) {
               return service->Sync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SamplesService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SamplesService::Service, ::edgify::DeleteAllSamplesRequest, ::edgify::DeleteAllSamplesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SamplesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::edgify::DeleteAllSamplesRequest* req,
             ::edgify::DeleteAllSamplesResponse* resp) {
               return service->DeleteAllSamples(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SamplesService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SamplesService::Service, ::edgify::DeleteSamplesRequest, ::edgify::DeleteSamplesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SamplesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::edgify::DeleteSamplesRequest* req,
             ::edgify::DeleteSamplesResponse* resp) {
               return service->DeleteSamples(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SamplesService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SamplesService::Service, ::edgify::DeleteSampleRequest, ::edgify::DeleteSampleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SamplesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::edgify::DeleteSampleRequest* req,
             ::edgify::DeleteSampleResponse* resp) {
               return service->DeleteSample(ctx, req, resp);
             }, this)));
}

SamplesService::Service::~Service() {
}

::grpc::Status SamplesService::Service::GetSamples(::grpc::ServerContext* context, const ::edgify::GetSamplesRequest* request, ::edgify::GetSamplesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SamplesService::Service::AddSample(::grpc::ServerContext* context, const ::edgify::AddSampleRequest* request, ::edgify::AddSampleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SamplesService::Service::UpdateSample(::grpc::ServerContext* context, const ::edgify::UpdateSampleRequest* request, ::edgify::UpdateSampleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SamplesService::Service::Sync(::grpc::ServerContext* context, const ::edgify::SyncRequest* request, ::edgify::SyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SamplesService::Service::DeleteAllSamples(::grpc::ServerContext* context, const ::edgify::DeleteAllSamplesRequest* request, ::edgify::DeleteAllSamplesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SamplesService::Service::DeleteSamples(::grpc::ServerContext* context, const ::edgify::DeleteSamplesRequest* request, ::edgify::DeleteSamplesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SamplesService::Service::DeleteSample(::grpc::ServerContext* context, const ::edgify::DeleteSampleRequest* request, ::edgify::DeleteSampleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace edgify


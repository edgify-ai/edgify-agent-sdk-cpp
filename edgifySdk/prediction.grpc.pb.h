// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: prediction.proto
#ifndef GRPC_prediction_2eproto__INCLUDED
#define GRPC_prediction_2eproto__INCLUDED

#include "prediction.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace edgify {

class EdgifyService final {
 public:
  static constexpr char const* service_full_name() {
    return "edgify.EdgifyService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest& request, ::edgify::PredictionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::PredictionResponse>> AsyncGetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::PredictionResponse>>(AsyncGetPredictionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::PredictionResponse>> PrepareAsyncGetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::PredictionResponse>>(PrepareAsyncGetPredictionRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest& request, ::edgify::GroundTruthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GroundTruthResponse>> AsyncCreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GroundTruthResponse>>(AsyncCreateGroundTruthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GroundTruthResponse>> PrepareAsyncCreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GroundTruthResponse>>(PrepareAsyncCreateGroundTruthRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest& request, ::edgify::GetCurrentModelDeploymentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GetCurrentModelDeploymentResponse>> AsyncGetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GetCurrentModelDeploymentResponse>>(AsyncGetCurrentModelDeploymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GetCurrentModelDeploymentResponse>> PrepareAsyncGetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GetCurrentModelDeploymentResponse>>(PrepareAsyncGetCurrentModelDeploymentRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest* request, ::edgify::PredictionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest* request, ::edgify::PredictionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest* request, ::edgify::PredictionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest* request, ::edgify::GroundTruthResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest* request, ::edgify::GroundTruthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest* request, ::edgify::GroundTruthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest* request, ::edgify::GetCurrentModelDeploymentResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest* request, ::edgify::GetCurrentModelDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest* request, ::edgify::GetCurrentModelDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::PredictionResponse>* AsyncGetPredictionRaw(::grpc::ClientContext* context, const ::edgify::PredictionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::PredictionResponse>* PrepareAsyncGetPredictionRaw(::grpc::ClientContext* context, const ::edgify::PredictionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GroundTruthResponse>* AsyncCreateGroundTruthRaw(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GroundTruthResponse>* PrepareAsyncCreateGroundTruthRaw(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GetCurrentModelDeploymentResponse>* AsyncGetCurrentModelDeploymentRaw(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::edgify::GetCurrentModelDeploymentResponse>* PrepareAsyncGetCurrentModelDeploymentRaw(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest& request, ::edgify::PredictionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::PredictionResponse>> AsyncGetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::PredictionResponse>>(AsyncGetPredictionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::PredictionResponse>> PrepareAsyncGetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::PredictionResponse>>(PrepareAsyncGetPredictionRaw(context, request, cq));
    }
    ::grpc::Status CreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest& request, ::edgify::GroundTruthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::GroundTruthResponse>> AsyncCreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::GroundTruthResponse>>(AsyncCreateGroundTruthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::GroundTruthResponse>> PrepareAsyncCreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::GroundTruthResponse>>(PrepareAsyncCreateGroundTruthRaw(context, request, cq));
    }
    ::grpc::Status GetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest& request, ::edgify::GetCurrentModelDeploymentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::GetCurrentModelDeploymentResponse>> AsyncGetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::GetCurrentModelDeploymentResponse>>(AsyncGetCurrentModelDeploymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::GetCurrentModelDeploymentResponse>> PrepareAsyncGetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::edgify::GetCurrentModelDeploymentResponse>>(PrepareAsyncGetCurrentModelDeploymentRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest* request, ::edgify::PredictionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest* request, ::edgify::PredictionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPrediction(::grpc::ClientContext* context, const ::edgify::PredictionRequest* request, ::edgify::PredictionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest* request, ::edgify::GroundTruthResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest* request, ::edgify::GroundTruthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateGroundTruth(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest* request, ::edgify::GroundTruthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest* request, ::edgify::GetCurrentModelDeploymentResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest* request, ::edgify::GetCurrentModelDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCurrentModelDeployment(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest* request, ::edgify::GetCurrentModelDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::edgify::PredictionResponse>* AsyncGetPredictionRaw(::grpc::ClientContext* context, const ::edgify::PredictionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::PredictionResponse>* PrepareAsyncGetPredictionRaw(::grpc::ClientContext* context, const ::edgify::PredictionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::GroundTruthResponse>* AsyncCreateGroundTruthRaw(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::GroundTruthResponse>* PrepareAsyncCreateGroundTruthRaw(::grpc::ClientContext* context, const ::edgify::GroundTruthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::GetCurrentModelDeploymentResponse>* AsyncGetCurrentModelDeploymentRaw(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::edgify::GetCurrentModelDeploymentResponse>* PrepareAsyncGetCurrentModelDeploymentRaw(::grpc::ClientContext* context, const ::edgify::GetCurrentModelDeploymentRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetPrediction_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateGroundTruth_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCurrentModelDeployment_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetPrediction(::grpc::ServerContext* context, const ::edgify::PredictionRequest* request, ::edgify::PredictionResponse* response);
    virtual ::grpc::Status CreateGroundTruth(::grpc::ServerContext* context, const ::edgify::GroundTruthRequest* request, ::edgify::GroundTruthResponse* response);
    virtual ::grpc::Status GetCurrentModelDeployment(::grpc::ServerContext* context, const ::edgify::GetCurrentModelDeploymentRequest* request, ::edgify::GetCurrentModelDeploymentResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPrediction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPrediction() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetPrediction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrediction(::grpc::ServerContext* /*context*/, const ::edgify::PredictionRequest* /*request*/, ::edgify::PredictionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPrediction(::grpc::ServerContext* context, ::edgify::PredictionRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgify::PredictionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateGroundTruth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateGroundTruth() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateGroundTruth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroundTruth(::grpc::ServerContext* /*context*/, const ::edgify::GroundTruthRequest* /*request*/, ::edgify::GroundTruthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGroundTruth(::grpc::ServerContext* context, ::edgify::GroundTruthRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgify::GroundTruthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCurrentModelDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCurrentModelDeployment() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCurrentModelDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentModelDeployment(::grpc::ServerContext* /*context*/, const ::edgify::GetCurrentModelDeploymentRequest* /*request*/, ::edgify::GetCurrentModelDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentModelDeployment(::grpc::ServerContext* context, ::edgify::GetCurrentModelDeploymentRequest* request, ::grpc::ServerAsyncResponseWriter< ::edgify::GetCurrentModelDeploymentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetPrediction<WithAsyncMethod_CreateGroundTruth<WithAsyncMethod_GetCurrentModelDeployment<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPrediction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPrediction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::edgify::PredictionRequest, ::edgify::PredictionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::edgify::PredictionRequest* request, ::edgify::PredictionResponse* response) { return this->GetPrediction(context, request, response); }));}
    void SetMessageAllocatorFor_GetPrediction(
        ::grpc::experimental::MessageAllocator< ::edgify::PredictionRequest, ::edgify::PredictionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::edgify::PredictionRequest, ::edgify::PredictionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPrediction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrediction(::grpc::ServerContext* /*context*/, const ::edgify::PredictionRequest* /*request*/, ::edgify::PredictionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPrediction(
      ::grpc::CallbackServerContext* /*context*/, const ::edgify::PredictionRequest* /*request*/, ::edgify::PredictionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPrediction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::edgify::PredictionRequest* /*request*/, ::edgify::PredictionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateGroundTruth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateGroundTruth() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::edgify::GroundTruthRequest, ::edgify::GroundTruthResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::edgify::GroundTruthRequest* request, ::edgify::GroundTruthResponse* response) { return this->CreateGroundTruth(context, request, response); }));}
    void SetMessageAllocatorFor_CreateGroundTruth(
        ::grpc::experimental::MessageAllocator< ::edgify::GroundTruthRequest, ::edgify::GroundTruthResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::edgify::GroundTruthRequest, ::edgify::GroundTruthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateGroundTruth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroundTruth(::grpc::ServerContext* /*context*/, const ::edgify::GroundTruthRequest* /*request*/, ::edgify::GroundTruthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateGroundTruth(
      ::grpc::CallbackServerContext* /*context*/, const ::edgify::GroundTruthRequest* /*request*/, ::edgify::GroundTruthResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateGroundTruth(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::edgify::GroundTruthRequest* /*request*/, ::edgify::GroundTruthResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCurrentModelDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCurrentModelDeployment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::edgify::GetCurrentModelDeploymentRequest, ::edgify::GetCurrentModelDeploymentResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::edgify::GetCurrentModelDeploymentRequest* request, ::edgify::GetCurrentModelDeploymentResponse* response) { return this->GetCurrentModelDeployment(context, request, response); }));}
    void SetMessageAllocatorFor_GetCurrentModelDeployment(
        ::grpc::experimental::MessageAllocator< ::edgify::GetCurrentModelDeploymentRequest, ::edgify::GetCurrentModelDeploymentResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::edgify::GetCurrentModelDeploymentRequest, ::edgify::GetCurrentModelDeploymentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCurrentModelDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentModelDeployment(::grpc::ServerContext* /*context*/, const ::edgify::GetCurrentModelDeploymentRequest* /*request*/, ::edgify::GetCurrentModelDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCurrentModelDeployment(
      ::grpc::CallbackServerContext* /*context*/, const ::edgify::GetCurrentModelDeploymentRequest* /*request*/, ::edgify::GetCurrentModelDeploymentResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCurrentModelDeployment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::edgify::GetCurrentModelDeploymentRequest* /*request*/, ::edgify::GetCurrentModelDeploymentResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetPrediction<ExperimentalWithCallbackMethod_CreateGroundTruth<ExperimentalWithCallbackMethod_GetCurrentModelDeployment<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetPrediction<ExperimentalWithCallbackMethod_CreateGroundTruth<ExperimentalWithCallbackMethod_GetCurrentModelDeployment<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetPrediction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPrediction() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetPrediction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrediction(::grpc::ServerContext* /*context*/, const ::edgify::PredictionRequest* /*request*/, ::edgify::PredictionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateGroundTruth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateGroundTruth() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateGroundTruth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroundTruth(::grpc::ServerContext* /*context*/, const ::edgify::GroundTruthRequest* /*request*/, ::edgify::GroundTruthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCurrentModelDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCurrentModelDeployment() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCurrentModelDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentModelDeployment(::grpc::ServerContext* /*context*/, const ::edgify::GetCurrentModelDeploymentRequest* /*request*/, ::edgify::GetCurrentModelDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPrediction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPrediction() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetPrediction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrediction(::grpc::ServerContext* /*context*/, const ::edgify::PredictionRequest* /*request*/, ::edgify::PredictionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPrediction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateGroundTruth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateGroundTruth() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateGroundTruth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroundTruth(::grpc::ServerContext* /*context*/, const ::edgify::GroundTruthRequest* /*request*/, ::edgify::GroundTruthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGroundTruth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCurrentModelDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCurrentModelDeployment() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCurrentModelDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentModelDeployment(::grpc::ServerContext* /*context*/, const ::edgify::GetCurrentModelDeploymentRequest* /*request*/, ::edgify::GetCurrentModelDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentModelDeployment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPrediction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPrediction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPrediction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPrediction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrediction(::grpc::ServerContext* /*context*/, const ::edgify::PredictionRequest* /*request*/, ::edgify::PredictionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPrediction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPrediction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateGroundTruth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateGroundTruth() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateGroundTruth(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateGroundTruth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroundTruth(::grpc::ServerContext* /*context*/, const ::edgify::GroundTruthRequest* /*request*/, ::edgify::GroundTruthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateGroundTruth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateGroundTruth(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCurrentModelDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCurrentModelDeployment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCurrentModelDeployment(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCurrentModelDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentModelDeployment(::grpc::ServerContext* /*context*/, const ::edgify::GetCurrentModelDeploymentRequest* /*request*/, ::edgify::GetCurrentModelDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCurrentModelDeployment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCurrentModelDeployment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPrediction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPrediction() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::edgify::PredictionRequest, ::edgify::PredictionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::edgify::PredictionRequest, ::edgify::PredictionResponse>* streamer) {
                       return this->StreamedGetPrediction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPrediction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPrediction(::grpc::ServerContext* /*context*/, const ::edgify::PredictionRequest* /*request*/, ::edgify::PredictionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPrediction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgify::PredictionRequest,::edgify::PredictionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateGroundTruth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateGroundTruth() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::edgify::GroundTruthRequest, ::edgify::GroundTruthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::edgify::GroundTruthRequest, ::edgify::GroundTruthResponse>* streamer) {
                       return this->StreamedCreateGroundTruth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateGroundTruth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateGroundTruth(::grpc::ServerContext* /*context*/, const ::edgify::GroundTruthRequest* /*request*/, ::edgify::GroundTruthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateGroundTruth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgify::GroundTruthRequest,::edgify::GroundTruthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCurrentModelDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCurrentModelDeployment() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::edgify::GetCurrentModelDeploymentRequest, ::edgify::GetCurrentModelDeploymentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::edgify::GetCurrentModelDeploymentRequest, ::edgify::GetCurrentModelDeploymentResponse>* streamer) {
                       return this->StreamedGetCurrentModelDeployment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCurrentModelDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCurrentModelDeployment(::grpc::ServerContext* /*context*/, const ::edgify::GetCurrentModelDeploymentRequest* /*request*/, ::edgify::GetCurrentModelDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCurrentModelDeployment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::edgify::GetCurrentModelDeploymentRequest,::edgify::GetCurrentModelDeploymentResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetPrediction<WithStreamedUnaryMethod_CreateGroundTruth<WithStreamedUnaryMethod_GetCurrentModelDeployment<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetPrediction<WithStreamedUnaryMethod_CreateGroundTruth<WithStreamedUnaryMethod_GetCurrentModelDeployment<Service > > > StreamedService;
};

}  // namespace edgify


#endif  // GRPC_prediction_2eproto__INCLUDED

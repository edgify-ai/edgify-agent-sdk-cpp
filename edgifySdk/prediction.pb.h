// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_prediction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_prediction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_prediction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_prediction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prediction_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_prediction_2eproto_metadata_getter(int index);
namespace edgify {
class GetCurrentModelDeploymentRequest;
struct GetCurrentModelDeploymentRequestDefaultTypeInternal;
extern GetCurrentModelDeploymentRequestDefaultTypeInternal _GetCurrentModelDeploymentRequest_default_instance_;
class GetCurrentModelDeploymentResponse;
struct GetCurrentModelDeploymentResponseDefaultTypeInternal;
extern GetCurrentModelDeploymentResponseDefaultTypeInternal _GetCurrentModelDeploymentResponse_default_instance_;
class GroundTruth;
struct GroundTruthDefaultTypeInternal;
extern GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;
class GroundTruthRequest;
struct GroundTruthRequestDefaultTypeInternal;
extern GroundTruthRequestDefaultTypeInternal _GroundTruthRequest_default_instance_;
class GroundTruthResponse;
struct GroundTruthResponseDefaultTypeInternal;
extern GroundTruthResponseDefaultTypeInternal _GroundTruthResponse_default_instance_;
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ModelDeployment;
struct ModelDeploymentDefaultTypeInternal;
extern ModelDeploymentDefaultTypeInternal _ModelDeployment_default_instance_;
class Prediction;
struct PredictionDefaultTypeInternal;
extern PredictionDefaultTypeInternal _Prediction_default_instance_;
class PredictionItem;
struct PredictionItemDefaultTypeInternal;
extern PredictionItemDefaultTypeInternal _PredictionItem_default_instance_;
class PredictionRequest;
struct PredictionRequestDefaultTypeInternal;
extern PredictionRequestDefaultTypeInternal _PredictionRequest_default_instance_;
class PredictionResponse;
struct PredictionResponseDefaultTypeInternal;
extern PredictionResponseDefaultTypeInternal _PredictionResponse_default_instance_;
}  // namespace edgify
PROTOBUF_NAMESPACE_OPEN
template<> ::edgify::GetCurrentModelDeploymentRequest* Arena::CreateMaybeMessage<::edgify::GetCurrentModelDeploymentRequest>(Arena*);
template<> ::edgify::GetCurrentModelDeploymentResponse* Arena::CreateMaybeMessage<::edgify::GetCurrentModelDeploymentResponse>(Arena*);
template<> ::edgify::GroundTruth* Arena::CreateMaybeMessage<::edgify::GroundTruth>(Arena*);
template<> ::edgify::GroundTruthRequest* Arena::CreateMaybeMessage<::edgify::GroundTruthRequest>(Arena*);
template<> ::edgify::GroundTruthResponse* Arena::CreateMaybeMessage<::edgify::GroundTruthResponse>(Arena*);
template<> ::edgify::Image* Arena::CreateMaybeMessage<::edgify::Image>(Arena*);
template<> ::edgify::ModelDeployment* Arena::CreateMaybeMessage<::edgify::ModelDeployment>(Arena*);
template<> ::edgify::Prediction* Arena::CreateMaybeMessage<::edgify::Prediction>(Arena*);
template<> ::edgify::PredictionItem* Arena::CreateMaybeMessage<::edgify::PredictionItem>(Arena*);
template<> ::edgify::PredictionRequest* Arena::CreateMaybeMessage<::edgify::PredictionRequest>(Arena*);
template<> ::edgify::PredictionResponse* Arena::CreateMaybeMessage<::edgify::PredictionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace edgify {

// ===================================================================

class PredictionItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgify.PredictionItem) */ {
 public:
  inline PredictionItem() : PredictionItem(nullptr) {}
  virtual ~PredictionItem();
  explicit constexpr PredictionItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PredictionItem(const PredictionItem& from);
  PredictionItem(PredictionItem&& from) noexcept
    : PredictionItem() {
    *this = ::std::move(from);
  }

  inline PredictionItem& operator=(const PredictionItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictionItem& operator=(PredictionItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictionItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const PredictionItem* internal_default_instance() {
    return reinterpret_cast<const PredictionItem*>(
               &_PredictionItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PredictionItem& a, PredictionItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictionItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictionItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictionItem* New() const final {
    return CreateMaybeMessage<PredictionItem>(nullptr);
  }

  PredictionItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictionItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictionItem& from);
  void MergeFrom(const PredictionItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgify.PredictionItem";
  }
  protected:
  explicit PredictionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // @@protoc_insertion_point(class_scope:edgify.PredictionItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class Prediction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgify.Prediction) */ {
 public:
  inline Prediction() : Prediction(nullptr) {}
  virtual ~Prediction();
  explicit constexpr Prediction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Prediction(const Prediction& from);
  Prediction(Prediction&& from) noexcept
    : Prediction() {
    *this = ::std::move(from);
  }

  inline Prediction& operator=(const Prediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prediction& operator=(Prediction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Prediction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Prediction* internal_default_instance() {
    return reinterpret_cast<const Prediction*>(
               &_Prediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Prediction& a, Prediction& b) {
    a.Swap(&b);
  }
  inline void Swap(Prediction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Prediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prediction* New() const final {
    return CreateMaybeMessage<Prediction>(nullptr);
  }

  Prediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prediction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Prediction& from);
  void MergeFrom(const Prediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prediction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgify.Prediction";
  }
  protected:
  explicit Prediction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionsFieldNumber = 5,
    kUuidFieldNumber = 1,
    kPredictedAtFieldNumber = 3,
    kSourceFieldNumber = 7,
    kImageFieldNumber = 6,
    kDurationFieldNumber = 2,
    kModelIdFieldNumber = 4,
    kCertainFieldNumber = 8,
  };
  // repeated .edgify.PredictionItem predictions = 5;
  int predictions_size() const;
  private:
  int _internal_predictions_size() const;
  public:
  void clear_predictions();
  ::edgify::PredictionItem* mutable_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::edgify::PredictionItem >*
      mutable_predictions();
  private:
  const ::edgify::PredictionItem& _internal_predictions(int index) const;
  ::edgify::PredictionItem* _internal_add_predictions();
  public:
  const ::edgify::PredictionItem& predictions(int index) const;
  ::edgify::PredictionItem* add_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::edgify::PredictionItem >&
      predictions() const;

  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string predicted_at = 3;
  void clear_predicted_at();
  const std::string& predicted_at() const;
  void set_predicted_at(const std::string& value);
  void set_predicted_at(std::string&& value);
  void set_predicted_at(const char* value);
  void set_predicted_at(const char* value, size_t size);
  std::string* mutable_predicted_at();
  std::string* release_predicted_at();
  void set_allocated_predicted_at(std::string* predicted_at);
  private:
  const std::string& _internal_predicted_at() const;
  void _internal_set_predicted_at(const std::string& value);
  std::string* _internal_mutable_predicted_at();
  public:

  // string source = 7;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // .edgify.Image image = 6;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::edgify::Image& image() const;
  ::edgify::Image* release_image();
  ::edgify::Image* mutable_image();
  void set_allocated_image(::edgify::Image* image);
  private:
  const ::edgify::Image& _internal_image() const;
  ::edgify::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::edgify::Image* image);
  ::edgify::Image* unsafe_arena_release_image();

  // uint32 duration = 2;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 model_id = 4;
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool certain = 8;
  void clear_certain();
  bool certain() const;
  void set_certain(bool value);
  private:
  bool _internal_certain() const;
  void _internal_set_certain(bool value);
  public:

  // @@protoc_insertion_point(class_scope:edgify.Prediction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::edgify::PredictionItem > predictions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predicted_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::edgify::Image* image_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id_;
  bool certain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class Image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgify.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  virtual ~Image();
  explicit constexpr Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgify.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kImageFieldNumber = 2,
    kGroupIdFieldNumber = 3,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string group_id = 3;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:edgify.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class ModelDeployment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgify.ModelDeployment) */ {
 public:
  inline ModelDeployment() : ModelDeployment(nullptr) {}
  virtual ~ModelDeployment();
  explicit constexpr ModelDeployment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelDeployment(const ModelDeployment& from);
  ModelDeployment(ModelDeployment&& from) noexcept
    : ModelDeployment() {
    *this = ::std::move(from);
  }

  inline ModelDeployment& operator=(const ModelDeployment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelDeployment& operator=(ModelDeployment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelDeployment& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelDeployment* internal_default_instance() {
    return reinterpret_cast<const ModelDeployment*>(
               &_ModelDeployment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModelDeployment& a, ModelDeployment& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelDeployment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelDeployment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelDeployment* New() const final {
    return CreateMaybeMessage<ModelDeployment>(nullptr);
  }

  ModelDeployment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelDeployment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelDeployment& from);
  void MergeFrom(const ModelDeployment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelDeployment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgify.ModelDeployment";
  }
  protected:
  explicit ModelDeployment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelPathFieldNumber = 3,
    kConfigPathFieldNumber = 4,
    kCreatedAtFieldNumber = 6,
    kIdFieldNumber = 1,
    kModelIdFieldNumber = 2,
    kVerifiedFieldNumber = 5,
  };
  // string model_path = 3;
  void clear_model_path();
  const std::string& model_path() const;
  void set_model_path(const std::string& value);
  void set_model_path(std::string&& value);
  void set_model_path(const char* value);
  void set_model_path(const char* value, size_t size);
  std::string* mutable_model_path();
  std::string* release_model_path();
  void set_allocated_model_path(std::string* model_path);
  private:
  const std::string& _internal_model_path() const;
  void _internal_set_model_path(const std::string& value);
  std::string* _internal_mutable_model_path();
  public:

  // string config_path = 4;
  void clear_config_path();
  const std::string& config_path() const;
  void set_config_path(const std::string& value);
  void set_config_path(std::string&& value);
  void set_config_path(const char* value);
  void set_config_path(const char* value, size_t size);
  std::string* mutable_config_path();
  std::string* release_config_path();
  void set_allocated_config_path(std::string* config_path);
  private:
  const std::string& _internal_config_path() const;
  void _internal_set_config_path(const std::string& value);
  std::string* _internal_mutable_config_path();
  public:

  // .google.protobuf.Timestamp created_at = 6;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 model_id = 2;
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool verified = 5;
  void clear_verified();
  bool verified() const;
  void set_verified(bool value);
  private:
  bool _internal_verified() const;
  void _internal_set_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:edgify.ModelDeployment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_path_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id_;
  bool verified_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class GroundTruth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgify.GroundTruth) */ {
 public:
  inline GroundTruth() : GroundTruth(nullptr) {}
  virtual ~GroundTruth();
  explicit constexpr GroundTruth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroundTruth(const GroundTruth& from);
  GroundTruth(GroundTruth&& from) noexcept
    : GroundTruth() {
    *this = ::std::move(from);
  }

  inline GroundTruth& operator=(const GroundTruth& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroundTruth& operator=(GroundTruth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroundTruth& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroundTruth* internal_default_instance() {
    return reinterpret_cast<const GroundTruth*>(
               &_GroundTruth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GroundTruth& a, GroundTruth& b) {
    a.Swap(&b);
  }
  inline void Swap(GroundTruth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroundTruth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroundTruth* New() const final {
    return CreateMaybeMessage<GroundTruth>(nullptr);
  }

  GroundTruth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroundTruth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroundTruth& from);
  void MergeFrom(const GroundTruth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundTruth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgify.GroundTruth";
  }
  protected:
  explicit GroundTruth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kSourceFieldNumber = 3,
    kPredictionFieldNumber = 1,
  };
  // string label = 2;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string source = 3;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // .edgify.Prediction prediction = 1;
  bool has_prediction() const;
  private:
  bool _internal_has_prediction() const;
  public:
  void clear_prediction();
  const ::edgify::Prediction& prediction() const;
  ::edgify::Prediction* release_prediction();
  ::edgify::Prediction* mutable_prediction();
  void set_allocated_prediction(::edgify::Prediction* prediction);
  private:
  const ::edgify::Prediction& _internal_prediction() const;
  ::edgify::Prediction* _internal_mutable_prediction();
  public:
  void unsafe_arena_set_allocated_prediction(
      ::edgify::Prediction* prediction);
  ::edgify::Prediction* unsafe_arena_release_prediction();

  // @@protoc_insertion_point(class_scope:edgify.GroundTruth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::edgify::Prediction* prediction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class PredictionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgify.PredictionRequest) */ {
 public:
  inline PredictionRequest() : PredictionRequest(nullptr) {}
  virtual ~PredictionRequest();
  explicit constexpr PredictionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PredictionRequest(const PredictionRequest& from);
  PredictionRequest(PredictionRequest&& from) noexcept
    : PredictionRequest() {
    *this = ::std::move(from);
  }

  inline PredictionRequest& operator=(const PredictionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictionRequest& operator=(PredictionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PredictionRequest* internal_default_instance() {
    return reinterpret_cast<const PredictionRequest*>(
               &_PredictionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PredictionRequest& a, PredictionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictionRequest* New() const final {
    return CreateMaybeMessage<PredictionRequest>(nullptr);
  }

  PredictionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictionRequest& from);
  void MergeFrom(const PredictionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgify.PredictionRequest";
  }
  protected:
  explicit PredictionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 3,
    kImageFieldNumber = 1,
    kWithoutPredictionFieldNumber = 2,
  };
  // string source = 3;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // .edgify.Image image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::edgify::Image& image() const;
  ::edgify::Image* release_image();
  ::edgify::Image* mutable_image();
  void set_allocated_image(::edgify::Image* image);
  private:
  const ::edgify::Image& _internal_image() const;
  ::edgify::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::edgify::Image* image);
  ::edgify::Image* unsafe_arena_release_image();

  // bool withoutPrediction = 2;
  void clear_withoutprediction();
  bool withoutprediction() const;
  void set_withoutprediction(bool value);
  private:
  bool _internal_withoutprediction() const;
  void _internal_set_withoutprediction(bool value);
  public:

  // @@protoc_insertion_point(class_scope:edgify.PredictionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::edgify::Image* image_;
  bool withoutprediction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class PredictionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgify.PredictionResponse) */ {
 public:
  inline PredictionResponse() : PredictionResponse(nullptr) {}
  virtual ~PredictionResponse();
  explicit constexpr PredictionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PredictionResponse(const PredictionResponse& from);
  PredictionResponse(PredictionResponse&& from) noexcept
    : PredictionResponse() {
    *this = ::std::move(from);
  }

  inline PredictionResponse& operator=(const PredictionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictionResponse& operator=(PredictionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PredictionResponse* internal_default_instance() {
    return reinterpret_cast<const PredictionResponse*>(
               &_PredictionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PredictionResponse& a, PredictionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictionResponse* New() const final {
    return CreateMaybeMessage<PredictionResponse>(nullptr);
  }

  PredictionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictionResponse& from);
  void MergeFrom(const PredictionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgify.PredictionResponse";
  }
  protected:
  explicit PredictionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionFieldNumber = 1,
  };
  // .edgify.Prediction prediction = 1;
  bool has_prediction() const;
  private:
  bool _internal_has_prediction() const;
  public:
  void clear_prediction();
  const ::edgify::Prediction& prediction() const;
  ::edgify::Prediction* release_prediction();
  ::edgify::Prediction* mutable_prediction();
  void set_allocated_prediction(::edgify::Prediction* prediction);
  private:
  const ::edgify::Prediction& _internal_prediction() const;
  ::edgify::Prediction* _internal_mutable_prediction();
  public:
  void unsafe_arena_set_allocated_prediction(
      ::edgify::Prediction* prediction);
  ::edgify::Prediction* unsafe_arena_release_prediction();

  // @@protoc_insertion_point(class_scope:edgify.PredictionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::edgify::Prediction* prediction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class GroundTruthRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgify.GroundTruthRequest) */ {
 public:
  inline GroundTruthRequest() : GroundTruthRequest(nullptr) {}
  virtual ~GroundTruthRequest();
  explicit constexpr GroundTruthRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroundTruthRequest(const GroundTruthRequest& from);
  GroundTruthRequest(GroundTruthRequest&& from) noexcept
    : GroundTruthRequest() {
    *this = ::std::move(from);
  }

  inline GroundTruthRequest& operator=(const GroundTruthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroundTruthRequest& operator=(GroundTruthRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroundTruthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroundTruthRequest* internal_default_instance() {
    return reinterpret_cast<const GroundTruthRequest*>(
               &_GroundTruthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GroundTruthRequest& a, GroundTruthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroundTruthRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroundTruthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroundTruthRequest* New() const final {
    return CreateMaybeMessage<GroundTruthRequest>(nullptr);
  }

  GroundTruthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroundTruthRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroundTruthRequest& from);
  void MergeFrom(const GroundTruthRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundTruthRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgify.GroundTruthRequest";
  }
  protected:
  explicit GroundTruthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 2,
    kGroundTruthFieldNumber = 1,
  };
  // string source = 2;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // .edgify.GroundTruth ground_truth = 1;
  bool has_ground_truth() const;
  private:
  bool _internal_has_ground_truth() const;
  public:
  void clear_ground_truth();
  const ::edgify::GroundTruth& ground_truth() const;
  ::edgify::GroundTruth* release_ground_truth();
  ::edgify::GroundTruth* mutable_ground_truth();
  void set_allocated_ground_truth(::edgify::GroundTruth* ground_truth);
  private:
  const ::edgify::GroundTruth& _internal_ground_truth() const;
  ::edgify::GroundTruth* _internal_mutable_ground_truth();
  public:
  void unsafe_arena_set_allocated_ground_truth(
      ::edgify::GroundTruth* ground_truth);
  ::edgify::GroundTruth* unsafe_arena_release_ground_truth();

  // @@protoc_insertion_point(class_scope:edgify.GroundTruthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::edgify::GroundTruth* ground_truth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class GroundTruthResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgify.GroundTruthResponse) */ {
 public:
  inline GroundTruthResponse() : GroundTruthResponse(nullptr) {}
  virtual ~GroundTruthResponse();
  explicit constexpr GroundTruthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroundTruthResponse(const GroundTruthResponse& from);
  GroundTruthResponse(GroundTruthResponse&& from) noexcept
    : GroundTruthResponse() {
    *this = ::std::move(from);
  }

  inline GroundTruthResponse& operator=(const GroundTruthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroundTruthResponse& operator=(GroundTruthResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroundTruthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroundTruthResponse* internal_default_instance() {
    return reinterpret_cast<const GroundTruthResponse*>(
               &_GroundTruthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GroundTruthResponse& a, GroundTruthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroundTruthResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroundTruthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroundTruthResponse* New() const final {
    return CreateMaybeMessage<GroundTruthResponse>(nullptr);
  }

  GroundTruthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroundTruthResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroundTruthResponse& from);
  void MergeFrom(const GroundTruthResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundTruthResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgify.GroundTruthResponse";
  }
  protected:
  explicit GroundTruthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:edgify.GroundTruthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class GetCurrentModelDeploymentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgify.GetCurrentModelDeploymentRequest) */ {
 public:
  inline GetCurrentModelDeploymentRequest() : GetCurrentModelDeploymentRequest(nullptr) {}
  virtual ~GetCurrentModelDeploymentRequest();
  explicit constexpr GetCurrentModelDeploymentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrentModelDeploymentRequest(const GetCurrentModelDeploymentRequest& from);
  GetCurrentModelDeploymentRequest(GetCurrentModelDeploymentRequest&& from) noexcept
    : GetCurrentModelDeploymentRequest() {
    *this = ::std::move(from);
  }

  inline GetCurrentModelDeploymentRequest& operator=(const GetCurrentModelDeploymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrentModelDeploymentRequest& operator=(GetCurrentModelDeploymentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCurrentModelDeploymentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrentModelDeploymentRequest* internal_default_instance() {
    return reinterpret_cast<const GetCurrentModelDeploymentRequest*>(
               &_GetCurrentModelDeploymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetCurrentModelDeploymentRequest& a, GetCurrentModelDeploymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrentModelDeploymentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrentModelDeploymentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCurrentModelDeploymentRequest* New() const final {
    return CreateMaybeMessage<GetCurrentModelDeploymentRequest>(nullptr);
  }

  GetCurrentModelDeploymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCurrentModelDeploymentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCurrentModelDeploymentRequest& from);
  void MergeFrom(const GetCurrentModelDeploymentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrentModelDeploymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgify.GetCurrentModelDeploymentRequest";
  }
  protected:
  explicit GetCurrentModelDeploymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:edgify.GetCurrentModelDeploymentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class GetCurrentModelDeploymentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgify.GetCurrentModelDeploymentResponse) */ {
 public:
  inline GetCurrentModelDeploymentResponse() : GetCurrentModelDeploymentResponse(nullptr) {}
  virtual ~GetCurrentModelDeploymentResponse();
  explicit constexpr GetCurrentModelDeploymentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrentModelDeploymentResponse(const GetCurrentModelDeploymentResponse& from);
  GetCurrentModelDeploymentResponse(GetCurrentModelDeploymentResponse&& from) noexcept
    : GetCurrentModelDeploymentResponse() {
    *this = ::std::move(from);
  }

  inline GetCurrentModelDeploymentResponse& operator=(const GetCurrentModelDeploymentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrentModelDeploymentResponse& operator=(GetCurrentModelDeploymentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCurrentModelDeploymentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrentModelDeploymentResponse* internal_default_instance() {
    return reinterpret_cast<const GetCurrentModelDeploymentResponse*>(
               &_GetCurrentModelDeploymentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetCurrentModelDeploymentResponse& a, GetCurrentModelDeploymentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrentModelDeploymentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrentModelDeploymentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCurrentModelDeploymentResponse* New() const final {
    return CreateMaybeMessage<GetCurrentModelDeploymentResponse>(nullptr);
  }

  GetCurrentModelDeploymentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCurrentModelDeploymentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCurrentModelDeploymentResponse& from);
  void MergeFrom(const GetCurrentModelDeploymentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrentModelDeploymentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgify.GetCurrentModelDeploymentResponse";
  }
  protected:
  explicit GetCurrentModelDeploymentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prediction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelDeploymentFieldNumber = 1,
  };
  // .edgify.ModelDeployment model_deployment = 1;
  bool has_model_deployment() const;
  private:
  bool _internal_has_model_deployment() const;
  public:
  void clear_model_deployment();
  const ::edgify::ModelDeployment& model_deployment() const;
  ::edgify::ModelDeployment* release_model_deployment();
  ::edgify::ModelDeployment* mutable_model_deployment();
  void set_allocated_model_deployment(::edgify::ModelDeployment* model_deployment);
  private:
  const ::edgify::ModelDeployment& _internal_model_deployment() const;
  ::edgify::ModelDeployment* _internal_mutable_model_deployment();
  public:
  void unsafe_arena_set_allocated_model_deployment(
      ::edgify::ModelDeployment* model_deployment);
  ::edgify::ModelDeployment* unsafe_arena_release_model_deployment();

  // @@protoc_insertion_point(class_scope:edgify.GetCurrentModelDeploymentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::edgify::ModelDeployment* model_deployment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PredictionItem

// repeated string data = 1;
inline int PredictionItem::_internal_data_size() const {
  return data_.size();
}
inline int PredictionItem::data_size() const {
  return _internal_data_size();
}
inline void PredictionItem::clear_data() {
  data_.Clear();
}
inline std::string* PredictionItem::add_data() {
  // @@protoc_insertion_point(field_add_mutable:edgify.PredictionItem.data)
  return _internal_add_data();
}
inline const std::string& PredictionItem::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& PredictionItem::data(int index) const {
  // @@protoc_insertion_point(field_get:edgify.PredictionItem.data)
  return _internal_data(index);
}
inline std::string* PredictionItem::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:edgify.PredictionItem.data)
  return data_.Mutable(index);
}
inline void PredictionItem::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:edgify.PredictionItem.data)
  data_.Mutable(index)->assign(value);
}
inline void PredictionItem::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:edgify.PredictionItem.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void PredictionItem::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:edgify.PredictionItem.data)
}
inline void PredictionItem::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edgify.PredictionItem.data)
}
inline std::string* PredictionItem::_internal_add_data() {
  return data_.Add();
}
inline void PredictionItem::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:edgify.PredictionItem.data)
}
inline void PredictionItem::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:edgify.PredictionItem.data)
}
inline void PredictionItem::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:edgify.PredictionItem.data)
}
inline void PredictionItem::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:edgify.PredictionItem.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PredictionItem::data() const {
  // @@protoc_insertion_point(field_list:edgify.PredictionItem.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PredictionItem::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:edgify.PredictionItem.data)
  return &data_;
}

// -------------------------------------------------------------------

// Prediction

// string uuid = 1;
inline void Prediction::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& Prediction::uuid() const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.uuid)
  return _internal_uuid();
}
inline void Prediction::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:edgify.Prediction.uuid)
}
inline std::string* Prediction::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:edgify.Prediction.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Prediction::_internal_uuid() const {
  return uuid_.Get();
}
inline void Prediction::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Prediction::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgify.Prediction.uuid)
}
inline void Prediction::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:edgify.Prediction.uuid)
}
inline void Prediction::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgify.Prediction.uuid)
}
inline std::string* Prediction::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Prediction::release_uuid() {
  // @@protoc_insertion_point(field_release:edgify.Prediction.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Prediction::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgify.Prediction.uuid)
}

// uint32 duration = 2;
inline void Prediction::clear_duration() {
  duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Prediction::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Prediction::duration() const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.duration)
  return _internal_duration();
}
inline void Prediction::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  duration_ = value;
}
inline void Prediction::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:edgify.Prediction.duration)
}

// string predicted_at = 3;
inline void Prediction::clear_predicted_at() {
  predicted_at_.ClearToEmpty();
}
inline const std::string& Prediction::predicted_at() const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.predicted_at)
  return _internal_predicted_at();
}
inline void Prediction::set_predicted_at(const std::string& value) {
  _internal_set_predicted_at(value);
  // @@protoc_insertion_point(field_set:edgify.Prediction.predicted_at)
}
inline std::string* Prediction::mutable_predicted_at() {
  // @@protoc_insertion_point(field_mutable:edgify.Prediction.predicted_at)
  return _internal_mutable_predicted_at();
}
inline const std::string& Prediction::_internal_predicted_at() const {
  return predicted_at_.Get();
}
inline void Prediction::_internal_set_predicted_at(const std::string& value) {
  
  predicted_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Prediction::set_predicted_at(std::string&& value) {
  
  predicted_at_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgify.Prediction.predicted_at)
}
inline void Prediction::set_predicted_at(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  predicted_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:edgify.Prediction.predicted_at)
}
inline void Prediction::set_predicted_at(const char* value,
    size_t size) {
  
  predicted_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgify.Prediction.predicted_at)
}
inline std::string* Prediction::_internal_mutable_predicted_at() {
  
  return predicted_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Prediction::release_predicted_at() {
  // @@protoc_insertion_point(field_release:edgify.Prediction.predicted_at)
  return predicted_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Prediction::set_allocated_predicted_at(std::string* predicted_at) {
  if (predicted_at != nullptr) {
    
  } else {
    
  }
  predicted_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), predicted_at,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgify.Prediction.predicted_at)
}

// uint32 model_id = 4;
inline void Prediction::clear_model_id() {
  model_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Prediction::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Prediction::model_id() const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.model_id)
  return _internal_model_id();
}
inline void Prediction::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  model_id_ = value;
}
inline void Prediction::set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:edgify.Prediction.model_id)
}

// repeated .edgify.PredictionItem predictions = 5;
inline int Prediction::_internal_predictions_size() const {
  return predictions_.size();
}
inline int Prediction::predictions_size() const {
  return _internal_predictions_size();
}
inline void Prediction::clear_predictions() {
  predictions_.Clear();
}
inline ::edgify::PredictionItem* Prediction::mutable_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:edgify.Prediction.predictions)
  return predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::edgify::PredictionItem >*
Prediction::mutable_predictions() {
  // @@protoc_insertion_point(field_mutable_list:edgify.Prediction.predictions)
  return &predictions_;
}
inline const ::edgify::PredictionItem& Prediction::_internal_predictions(int index) const {
  return predictions_.Get(index);
}
inline const ::edgify::PredictionItem& Prediction::predictions(int index) const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.predictions)
  return _internal_predictions(index);
}
inline ::edgify::PredictionItem* Prediction::_internal_add_predictions() {
  return predictions_.Add();
}
inline ::edgify::PredictionItem* Prediction::add_predictions() {
  // @@protoc_insertion_point(field_add:edgify.Prediction.predictions)
  return _internal_add_predictions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::edgify::PredictionItem >&
Prediction::predictions() const {
  // @@protoc_insertion_point(field_list:edgify.Prediction.predictions)
  return predictions_;
}

// .edgify.Image image = 6;
inline bool Prediction::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool Prediction::has_image() const {
  return _internal_has_image();
}
inline void Prediction::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::edgify::Image& Prediction::_internal_image() const {
  const ::edgify::Image* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::edgify::Image&>(
      ::edgify::_Image_default_instance_);
}
inline const ::edgify::Image& Prediction::image() const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.image)
  return _internal_image();
}
inline void Prediction::unsafe_arena_set_allocated_image(
    ::edgify::Image* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:edgify.Prediction.image)
}
inline ::edgify::Image* Prediction::release_image() {
  
  ::edgify::Image* temp = image_;
  image_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::edgify::Image* Prediction::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:edgify.Prediction.image)
  
  ::edgify::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::edgify::Image* Prediction::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::edgify::Image>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::edgify::Image* Prediction::mutable_image() {
  // @@protoc_insertion_point(field_mutable:edgify.Prediction.image)
  return _internal_mutable_image();
}
inline void Prediction::set_allocated_image(::edgify::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:edgify.Prediction.image)
}

// string source = 7;
inline void Prediction::clear_source() {
  source_.ClearToEmpty();
}
inline const std::string& Prediction::source() const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.source)
  return _internal_source();
}
inline void Prediction::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:edgify.Prediction.source)
}
inline std::string* Prediction::mutable_source() {
  // @@protoc_insertion_point(field_mutable:edgify.Prediction.source)
  return _internal_mutable_source();
}
inline const std::string& Prediction::_internal_source() const {
  return source_.Get();
}
inline void Prediction::_internal_set_source(const std::string& value) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Prediction::set_source(std::string&& value) {
  
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgify.Prediction.source)
}
inline void Prediction::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:edgify.Prediction.source)
}
inline void Prediction::set_source(const char* value,
    size_t size) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgify.Prediction.source)
}
inline std::string* Prediction::_internal_mutable_source() {
  
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Prediction::release_source() {
  // @@protoc_insertion_point(field_release:edgify.Prediction.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Prediction::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgify.Prediction.source)
}

// bool certain = 8;
inline void Prediction::clear_certain() {
  certain_ = false;
}
inline bool Prediction::_internal_certain() const {
  return certain_;
}
inline bool Prediction::certain() const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.certain)
  return _internal_certain();
}
inline void Prediction::_internal_set_certain(bool value) {
  
  certain_ = value;
}
inline void Prediction::set_certain(bool value) {
  _internal_set_certain(value);
  // @@protoc_insertion_point(field_set:edgify.Prediction.certain)
}

// -------------------------------------------------------------------

// Image

// string uuid = 1;
inline void Image::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& Image::uuid() const {
  // @@protoc_insertion_point(field_get:edgify.Image.uuid)
  return _internal_uuid();
}
inline void Image::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:edgify.Image.uuid)
}
inline std::string* Image::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:edgify.Image.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Image::_internal_uuid() const {
  return uuid_.Get();
}
inline void Image::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Image::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgify.Image.uuid)
}
inline void Image::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:edgify.Image.uuid)
}
inline void Image::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgify.Image.uuid)
}
inline std::string* Image::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Image::release_uuid() {
  // @@protoc_insertion_point(field_release:edgify.Image.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Image::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgify.Image.uuid)
}

// bytes image = 2;
inline void Image::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& Image::image() const {
  // @@protoc_insertion_point(field_get:edgify.Image.image)
  return _internal_image();
}
inline void Image::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:edgify.Image.image)
}
inline std::string* Image::mutable_image() {
  // @@protoc_insertion_point(field_mutable:edgify.Image.image)
  return _internal_mutable_image();
}
inline const std::string& Image::_internal_image() const {
  return image_.Get();
}
inline void Image::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Image::set_image(std::string&& value) {
  
  image_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgify.Image.image)
}
inline void Image::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:edgify.Image.image)
}
inline void Image::set_image(const void* value,
    size_t size) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgify.Image.image)
}
inline std::string* Image::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Image::release_image() {
  // @@protoc_insertion_point(field_release:edgify.Image.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Image::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgify.Image.image)
}

// string group_id = 3;
inline void Image::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& Image::group_id() const {
  // @@protoc_insertion_point(field_get:edgify.Image.group_id)
  return _internal_group_id();
}
inline void Image::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:edgify.Image.group_id)
}
inline std::string* Image::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:edgify.Image.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& Image::_internal_group_id() const {
  return group_id_.Get();
}
inline void Image::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Image::set_group_id(std::string&& value) {
  
  group_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgify.Image.group_id)
}
inline void Image::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:edgify.Image.group_id)
}
inline void Image::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgify.Image.group_id)
}
inline std::string* Image::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Image::release_group_id() {
  // @@protoc_insertion_point(field_release:edgify.Image.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Image::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgify.Image.group_id)
}

// -------------------------------------------------------------------

// ModelDeployment

// uint32 id = 1;
inline void ModelDeployment::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelDeployment::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelDeployment::id() const {
  // @@protoc_insertion_point(field_get:edgify.ModelDeployment.id)
  return _internal_id();
}
inline void ModelDeployment::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ModelDeployment::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:edgify.ModelDeployment.id)
}

// uint32 model_id = 2;
inline void ModelDeployment::clear_model_id() {
  model_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelDeployment::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelDeployment::model_id() const {
  // @@protoc_insertion_point(field_get:edgify.ModelDeployment.model_id)
  return _internal_model_id();
}
inline void ModelDeployment::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  model_id_ = value;
}
inline void ModelDeployment::set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:edgify.ModelDeployment.model_id)
}

// string model_path = 3;
inline void ModelDeployment::clear_model_path() {
  model_path_.ClearToEmpty();
}
inline const std::string& ModelDeployment::model_path() const {
  // @@protoc_insertion_point(field_get:edgify.ModelDeployment.model_path)
  return _internal_model_path();
}
inline void ModelDeployment::set_model_path(const std::string& value) {
  _internal_set_model_path(value);
  // @@protoc_insertion_point(field_set:edgify.ModelDeployment.model_path)
}
inline std::string* ModelDeployment::mutable_model_path() {
  // @@protoc_insertion_point(field_mutable:edgify.ModelDeployment.model_path)
  return _internal_mutable_model_path();
}
inline const std::string& ModelDeployment::_internal_model_path() const {
  return model_path_.Get();
}
inline void ModelDeployment::_internal_set_model_path(const std::string& value) {
  
  model_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModelDeployment::set_model_path(std::string&& value) {
  
  model_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgify.ModelDeployment.model_path)
}
inline void ModelDeployment::set_model_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:edgify.ModelDeployment.model_path)
}
inline void ModelDeployment::set_model_path(const char* value,
    size_t size) {
  
  model_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgify.ModelDeployment.model_path)
}
inline std::string* ModelDeployment::_internal_mutable_model_path() {
  
  return model_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModelDeployment::release_model_path() {
  // @@protoc_insertion_point(field_release:edgify.ModelDeployment.model_path)
  return model_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelDeployment::set_allocated_model_path(std::string* model_path) {
  if (model_path != nullptr) {
    
  } else {
    
  }
  model_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgify.ModelDeployment.model_path)
}

// string config_path = 4;
inline void ModelDeployment::clear_config_path() {
  config_path_.ClearToEmpty();
}
inline const std::string& ModelDeployment::config_path() const {
  // @@protoc_insertion_point(field_get:edgify.ModelDeployment.config_path)
  return _internal_config_path();
}
inline void ModelDeployment::set_config_path(const std::string& value) {
  _internal_set_config_path(value);
  // @@protoc_insertion_point(field_set:edgify.ModelDeployment.config_path)
}
inline std::string* ModelDeployment::mutable_config_path() {
  // @@protoc_insertion_point(field_mutable:edgify.ModelDeployment.config_path)
  return _internal_mutable_config_path();
}
inline const std::string& ModelDeployment::_internal_config_path() const {
  return config_path_.Get();
}
inline void ModelDeployment::_internal_set_config_path(const std::string& value) {
  
  config_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModelDeployment::set_config_path(std::string&& value) {
  
  config_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgify.ModelDeployment.config_path)
}
inline void ModelDeployment::set_config_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:edgify.ModelDeployment.config_path)
}
inline void ModelDeployment::set_config_path(const char* value,
    size_t size) {
  
  config_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgify.ModelDeployment.config_path)
}
inline std::string* ModelDeployment::_internal_mutable_config_path() {
  
  return config_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModelDeployment::release_config_path() {
  // @@protoc_insertion_point(field_release:edgify.ModelDeployment.config_path)
  return config_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelDeployment::set_allocated_config_path(std::string* config_path) {
  if (config_path != nullptr) {
    
  } else {
    
  }
  config_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgify.ModelDeployment.config_path)
}

// bool verified = 5;
inline void ModelDeployment::clear_verified() {
  verified_ = false;
}
inline bool ModelDeployment::_internal_verified() const {
  return verified_;
}
inline bool ModelDeployment::verified() const {
  // @@protoc_insertion_point(field_get:edgify.ModelDeployment.verified)
  return _internal_verified();
}
inline void ModelDeployment::_internal_set_verified(bool value) {
  
  verified_ = value;
}
inline void ModelDeployment::set_verified(bool value) {
  _internal_set_verified(value);
  // @@protoc_insertion_point(field_set:edgify.ModelDeployment.verified)
}

// .google.protobuf.Timestamp created_at = 6;
inline bool ModelDeployment::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool ModelDeployment::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ModelDeployment::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ModelDeployment::created_at() const {
  // @@protoc_insertion_point(field_get:edgify.ModelDeployment.created_at)
  return _internal_created_at();
}
inline void ModelDeployment::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:edgify.ModelDeployment.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelDeployment::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelDeployment::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:edgify.ModelDeployment.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelDeployment::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelDeployment::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:edgify.ModelDeployment.created_at)
  return _internal_mutable_created_at();
}
inline void ModelDeployment::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:edgify.ModelDeployment.created_at)
}

// -------------------------------------------------------------------

// GroundTruth

// .edgify.Prediction prediction = 1;
inline bool GroundTruth::_internal_has_prediction() const {
  return this != internal_default_instance() && prediction_ != nullptr;
}
inline bool GroundTruth::has_prediction() const {
  return _internal_has_prediction();
}
inline void GroundTruth::clear_prediction() {
  if (GetArena() == nullptr && prediction_ != nullptr) {
    delete prediction_;
  }
  prediction_ = nullptr;
}
inline const ::edgify::Prediction& GroundTruth::_internal_prediction() const {
  const ::edgify::Prediction* p = prediction_;
  return p != nullptr ? *p : reinterpret_cast<const ::edgify::Prediction&>(
      ::edgify::_Prediction_default_instance_);
}
inline const ::edgify::Prediction& GroundTruth::prediction() const {
  // @@protoc_insertion_point(field_get:edgify.GroundTruth.prediction)
  return _internal_prediction();
}
inline void GroundTruth::unsafe_arena_set_allocated_prediction(
    ::edgify::Prediction* prediction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prediction_);
  }
  prediction_ = prediction;
  if (prediction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:edgify.GroundTruth.prediction)
}
inline ::edgify::Prediction* GroundTruth::release_prediction() {
  
  ::edgify::Prediction* temp = prediction_;
  prediction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::edgify::Prediction* GroundTruth::unsafe_arena_release_prediction() {
  // @@protoc_insertion_point(field_release:edgify.GroundTruth.prediction)
  
  ::edgify::Prediction* temp = prediction_;
  prediction_ = nullptr;
  return temp;
}
inline ::edgify::Prediction* GroundTruth::_internal_mutable_prediction() {
  
  if (prediction_ == nullptr) {
    auto* p = CreateMaybeMessage<::edgify::Prediction>(GetArena());
    prediction_ = p;
  }
  return prediction_;
}
inline ::edgify::Prediction* GroundTruth::mutable_prediction() {
  // @@protoc_insertion_point(field_mutable:edgify.GroundTruth.prediction)
  return _internal_mutable_prediction();
}
inline void GroundTruth::set_allocated_prediction(::edgify::Prediction* prediction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prediction_;
  }
  if (prediction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prediction);
    if (message_arena != submessage_arena) {
      prediction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prediction, submessage_arena);
    }
    
  } else {
    
  }
  prediction_ = prediction;
  // @@protoc_insertion_point(field_set_allocated:edgify.GroundTruth.prediction)
}

// string label = 2;
inline void GroundTruth::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& GroundTruth::label() const {
  // @@protoc_insertion_point(field_get:edgify.GroundTruth.label)
  return _internal_label();
}
inline void GroundTruth::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:edgify.GroundTruth.label)
}
inline std::string* GroundTruth::mutable_label() {
  // @@protoc_insertion_point(field_mutable:edgify.GroundTruth.label)
  return _internal_mutable_label();
}
inline const std::string& GroundTruth::_internal_label() const {
  return label_.Get();
}
inline void GroundTruth::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GroundTruth::set_label(std::string&& value) {
  
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgify.GroundTruth.label)
}
inline void GroundTruth::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:edgify.GroundTruth.label)
}
inline void GroundTruth::set_label(const char* value,
    size_t size) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgify.GroundTruth.label)
}
inline std::string* GroundTruth::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GroundTruth::release_label() {
  // @@protoc_insertion_point(field_release:edgify.GroundTruth.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroundTruth::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgify.GroundTruth.label)
}

// string source = 3;
inline void GroundTruth::clear_source() {
  source_.ClearToEmpty();
}
inline const std::string& GroundTruth::source() const {
  // @@protoc_insertion_point(field_get:edgify.GroundTruth.source)
  return _internal_source();
}
inline void GroundTruth::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:edgify.GroundTruth.source)
}
inline std::string* GroundTruth::mutable_source() {
  // @@protoc_insertion_point(field_mutable:edgify.GroundTruth.source)
  return _internal_mutable_source();
}
inline const std::string& GroundTruth::_internal_source() const {
  return source_.Get();
}
inline void GroundTruth::_internal_set_source(const std::string& value) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GroundTruth::set_source(std::string&& value) {
  
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgify.GroundTruth.source)
}
inline void GroundTruth::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:edgify.GroundTruth.source)
}
inline void GroundTruth::set_source(const char* value,
    size_t size) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgify.GroundTruth.source)
}
inline std::string* GroundTruth::_internal_mutable_source() {
  
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GroundTruth::release_source() {
  // @@protoc_insertion_point(field_release:edgify.GroundTruth.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroundTruth::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgify.GroundTruth.source)
}

// -------------------------------------------------------------------

// PredictionRequest

// .edgify.Image image = 1;
inline bool PredictionRequest::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool PredictionRequest::has_image() const {
  return _internal_has_image();
}
inline void PredictionRequest::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::edgify::Image& PredictionRequest::_internal_image() const {
  const ::edgify::Image* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::edgify::Image&>(
      ::edgify::_Image_default_instance_);
}
inline const ::edgify::Image& PredictionRequest::image() const {
  // @@protoc_insertion_point(field_get:edgify.PredictionRequest.image)
  return _internal_image();
}
inline void PredictionRequest::unsafe_arena_set_allocated_image(
    ::edgify::Image* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:edgify.PredictionRequest.image)
}
inline ::edgify::Image* PredictionRequest::release_image() {
  
  ::edgify::Image* temp = image_;
  image_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::edgify::Image* PredictionRequest::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:edgify.PredictionRequest.image)
  
  ::edgify::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::edgify::Image* PredictionRequest::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::edgify::Image>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::edgify::Image* PredictionRequest::mutable_image() {
  // @@protoc_insertion_point(field_mutable:edgify.PredictionRequest.image)
  return _internal_mutable_image();
}
inline void PredictionRequest::set_allocated_image(::edgify::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:edgify.PredictionRequest.image)
}

// bool withoutPrediction = 2;
inline void PredictionRequest::clear_withoutprediction() {
  withoutprediction_ = false;
}
inline bool PredictionRequest::_internal_withoutprediction() const {
  return withoutprediction_;
}
inline bool PredictionRequest::withoutprediction() const {
  // @@protoc_insertion_point(field_get:edgify.PredictionRequest.withoutPrediction)
  return _internal_withoutprediction();
}
inline void PredictionRequest::_internal_set_withoutprediction(bool value) {
  
  withoutprediction_ = value;
}
inline void PredictionRequest::set_withoutprediction(bool value) {
  _internal_set_withoutprediction(value);
  // @@protoc_insertion_point(field_set:edgify.PredictionRequest.withoutPrediction)
}

// string source = 3;
inline void PredictionRequest::clear_source() {
  source_.ClearToEmpty();
}
inline const std::string& PredictionRequest::source() const {
  // @@protoc_insertion_point(field_get:edgify.PredictionRequest.source)
  return _internal_source();
}
inline void PredictionRequest::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:edgify.PredictionRequest.source)
}
inline std::string* PredictionRequest::mutable_source() {
  // @@protoc_insertion_point(field_mutable:edgify.PredictionRequest.source)
  return _internal_mutable_source();
}
inline const std::string& PredictionRequest::_internal_source() const {
  return source_.Get();
}
inline void PredictionRequest::_internal_set_source(const std::string& value) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PredictionRequest::set_source(std::string&& value) {
  
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgify.PredictionRequest.source)
}
inline void PredictionRequest::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:edgify.PredictionRequest.source)
}
inline void PredictionRequest::set_source(const char* value,
    size_t size) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgify.PredictionRequest.source)
}
inline std::string* PredictionRequest::_internal_mutable_source() {
  
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PredictionRequest::release_source() {
  // @@protoc_insertion_point(field_release:edgify.PredictionRequest.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PredictionRequest::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgify.PredictionRequest.source)
}

// -------------------------------------------------------------------

// PredictionResponse

// .edgify.Prediction prediction = 1;
inline bool PredictionResponse::_internal_has_prediction() const {
  return this != internal_default_instance() && prediction_ != nullptr;
}
inline bool PredictionResponse::has_prediction() const {
  return _internal_has_prediction();
}
inline void PredictionResponse::clear_prediction() {
  if (GetArena() == nullptr && prediction_ != nullptr) {
    delete prediction_;
  }
  prediction_ = nullptr;
}
inline const ::edgify::Prediction& PredictionResponse::_internal_prediction() const {
  const ::edgify::Prediction* p = prediction_;
  return p != nullptr ? *p : reinterpret_cast<const ::edgify::Prediction&>(
      ::edgify::_Prediction_default_instance_);
}
inline const ::edgify::Prediction& PredictionResponse::prediction() const {
  // @@protoc_insertion_point(field_get:edgify.PredictionResponse.prediction)
  return _internal_prediction();
}
inline void PredictionResponse::unsafe_arena_set_allocated_prediction(
    ::edgify::Prediction* prediction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prediction_);
  }
  prediction_ = prediction;
  if (prediction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:edgify.PredictionResponse.prediction)
}
inline ::edgify::Prediction* PredictionResponse::release_prediction() {
  
  ::edgify::Prediction* temp = prediction_;
  prediction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::edgify::Prediction* PredictionResponse::unsafe_arena_release_prediction() {
  // @@protoc_insertion_point(field_release:edgify.PredictionResponse.prediction)
  
  ::edgify::Prediction* temp = prediction_;
  prediction_ = nullptr;
  return temp;
}
inline ::edgify::Prediction* PredictionResponse::_internal_mutable_prediction() {
  
  if (prediction_ == nullptr) {
    auto* p = CreateMaybeMessage<::edgify::Prediction>(GetArena());
    prediction_ = p;
  }
  return prediction_;
}
inline ::edgify::Prediction* PredictionResponse::mutable_prediction() {
  // @@protoc_insertion_point(field_mutable:edgify.PredictionResponse.prediction)
  return _internal_mutable_prediction();
}
inline void PredictionResponse::set_allocated_prediction(::edgify::Prediction* prediction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prediction_;
  }
  if (prediction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prediction);
    if (message_arena != submessage_arena) {
      prediction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prediction, submessage_arena);
    }
    
  } else {
    
  }
  prediction_ = prediction;
  // @@protoc_insertion_point(field_set_allocated:edgify.PredictionResponse.prediction)
}

// -------------------------------------------------------------------

// GroundTruthRequest

// .edgify.GroundTruth ground_truth = 1;
inline bool GroundTruthRequest::_internal_has_ground_truth() const {
  return this != internal_default_instance() && ground_truth_ != nullptr;
}
inline bool GroundTruthRequest::has_ground_truth() const {
  return _internal_has_ground_truth();
}
inline void GroundTruthRequest::clear_ground_truth() {
  if (GetArena() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
}
inline const ::edgify::GroundTruth& GroundTruthRequest::_internal_ground_truth() const {
  const ::edgify::GroundTruth* p = ground_truth_;
  return p != nullptr ? *p : reinterpret_cast<const ::edgify::GroundTruth&>(
      ::edgify::_GroundTruth_default_instance_);
}
inline const ::edgify::GroundTruth& GroundTruthRequest::ground_truth() const {
  // @@protoc_insertion_point(field_get:edgify.GroundTruthRequest.ground_truth)
  return _internal_ground_truth();
}
inline void GroundTruthRequest::unsafe_arena_set_allocated_ground_truth(
    ::edgify::GroundTruth* ground_truth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ground_truth_);
  }
  ground_truth_ = ground_truth;
  if (ground_truth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:edgify.GroundTruthRequest.ground_truth)
}
inline ::edgify::GroundTruth* GroundTruthRequest::release_ground_truth() {
  
  ::edgify::GroundTruth* temp = ground_truth_;
  ground_truth_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::edgify::GroundTruth* GroundTruthRequest::unsafe_arena_release_ground_truth() {
  // @@protoc_insertion_point(field_release:edgify.GroundTruthRequest.ground_truth)
  
  ::edgify::GroundTruth* temp = ground_truth_;
  ground_truth_ = nullptr;
  return temp;
}
inline ::edgify::GroundTruth* GroundTruthRequest::_internal_mutable_ground_truth() {
  
  if (ground_truth_ == nullptr) {
    auto* p = CreateMaybeMessage<::edgify::GroundTruth>(GetArena());
    ground_truth_ = p;
  }
  return ground_truth_;
}
inline ::edgify::GroundTruth* GroundTruthRequest::mutable_ground_truth() {
  // @@protoc_insertion_point(field_mutable:edgify.GroundTruthRequest.ground_truth)
  return _internal_mutable_ground_truth();
}
inline void GroundTruthRequest::set_allocated_ground_truth(::edgify::GroundTruth* ground_truth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ground_truth_;
  }
  if (ground_truth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ground_truth);
    if (message_arena != submessage_arena) {
      ground_truth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ground_truth, submessage_arena);
    }
    
  } else {
    
  }
  ground_truth_ = ground_truth;
  // @@protoc_insertion_point(field_set_allocated:edgify.GroundTruthRequest.ground_truth)
}

// string source = 2;
inline void GroundTruthRequest::clear_source() {
  source_.ClearToEmpty();
}
inline const std::string& GroundTruthRequest::source() const {
  // @@protoc_insertion_point(field_get:edgify.GroundTruthRequest.source)
  return _internal_source();
}
inline void GroundTruthRequest::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:edgify.GroundTruthRequest.source)
}
inline std::string* GroundTruthRequest::mutable_source() {
  // @@protoc_insertion_point(field_mutable:edgify.GroundTruthRequest.source)
  return _internal_mutable_source();
}
inline const std::string& GroundTruthRequest::_internal_source() const {
  return source_.Get();
}
inline void GroundTruthRequest::_internal_set_source(const std::string& value) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GroundTruthRequest::set_source(std::string&& value) {
  
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgify.GroundTruthRequest.source)
}
inline void GroundTruthRequest::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:edgify.GroundTruthRequest.source)
}
inline void GroundTruthRequest::set_source(const char* value,
    size_t size) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgify.GroundTruthRequest.source)
}
inline std::string* GroundTruthRequest::_internal_mutable_source() {
  
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GroundTruthRequest::release_source() {
  // @@protoc_insertion_point(field_release:edgify.GroundTruthRequest.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroundTruthRequest::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgify.GroundTruthRequest.source)
}

// -------------------------------------------------------------------

// GroundTruthResponse

// -------------------------------------------------------------------

// GetCurrentModelDeploymentRequest

// -------------------------------------------------------------------

// GetCurrentModelDeploymentResponse

// .edgify.ModelDeployment model_deployment = 1;
inline bool GetCurrentModelDeploymentResponse::_internal_has_model_deployment() const {
  return this != internal_default_instance() && model_deployment_ != nullptr;
}
inline bool GetCurrentModelDeploymentResponse::has_model_deployment() const {
  return _internal_has_model_deployment();
}
inline void GetCurrentModelDeploymentResponse::clear_model_deployment() {
  if (GetArena() == nullptr && model_deployment_ != nullptr) {
    delete model_deployment_;
  }
  model_deployment_ = nullptr;
}
inline const ::edgify::ModelDeployment& GetCurrentModelDeploymentResponse::_internal_model_deployment() const {
  const ::edgify::ModelDeployment* p = model_deployment_;
  return p != nullptr ? *p : reinterpret_cast<const ::edgify::ModelDeployment&>(
      ::edgify::_ModelDeployment_default_instance_);
}
inline const ::edgify::ModelDeployment& GetCurrentModelDeploymentResponse::model_deployment() const {
  // @@protoc_insertion_point(field_get:edgify.GetCurrentModelDeploymentResponse.model_deployment)
  return _internal_model_deployment();
}
inline void GetCurrentModelDeploymentResponse::unsafe_arena_set_allocated_model_deployment(
    ::edgify::ModelDeployment* model_deployment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_deployment_);
  }
  model_deployment_ = model_deployment;
  if (model_deployment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:edgify.GetCurrentModelDeploymentResponse.model_deployment)
}
inline ::edgify::ModelDeployment* GetCurrentModelDeploymentResponse::release_model_deployment() {
  
  ::edgify::ModelDeployment* temp = model_deployment_;
  model_deployment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::edgify::ModelDeployment* GetCurrentModelDeploymentResponse::unsafe_arena_release_model_deployment() {
  // @@protoc_insertion_point(field_release:edgify.GetCurrentModelDeploymentResponse.model_deployment)
  
  ::edgify::ModelDeployment* temp = model_deployment_;
  model_deployment_ = nullptr;
  return temp;
}
inline ::edgify::ModelDeployment* GetCurrentModelDeploymentResponse::_internal_mutable_model_deployment() {
  
  if (model_deployment_ == nullptr) {
    auto* p = CreateMaybeMessage<::edgify::ModelDeployment>(GetArena());
    model_deployment_ = p;
  }
  return model_deployment_;
}
inline ::edgify::ModelDeployment* GetCurrentModelDeploymentResponse::mutable_model_deployment() {
  // @@protoc_insertion_point(field_mutable:edgify.GetCurrentModelDeploymentResponse.model_deployment)
  return _internal_mutable_model_deployment();
}
inline void GetCurrentModelDeploymentResponse::set_allocated_model_deployment(::edgify::ModelDeployment* model_deployment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete model_deployment_;
  }
  if (model_deployment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model_deployment);
    if (message_arena != submessage_arena) {
      model_deployment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_deployment, submessage_arena);
    }
    
  } else {
    
  }
  model_deployment_ = model_deployment;
  // @@protoc_insertion_point(field_set_allocated:edgify.GetCurrentModelDeploymentResponse.model_deployment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace edgify

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_prediction_2eproto

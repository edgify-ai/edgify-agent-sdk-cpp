// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction.proto

#ifndef PROTOBUF_INCLUDED_prediction_2eproto
#define PROTOBUF_INCLUDED_prediction_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_prediction_2eproto 

namespace protobuf_prediction_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_prediction_2eproto
namespace edgify {
class GetCurrentModelDeploymentRequest;
class GetCurrentModelDeploymentRequestDefaultTypeInternal;
extern GetCurrentModelDeploymentRequestDefaultTypeInternal _GetCurrentModelDeploymentRequest_default_instance_;
class GetCurrentModelDeploymentResponse;
class GetCurrentModelDeploymentResponseDefaultTypeInternal;
extern GetCurrentModelDeploymentResponseDefaultTypeInternal _GetCurrentModelDeploymentResponse_default_instance_;
class GroundTruth;
class GroundTruthDefaultTypeInternal;
extern GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;
class GroundTruthRequest;
class GroundTruthRequestDefaultTypeInternal;
extern GroundTruthRequestDefaultTypeInternal _GroundTruthRequest_default_instance_;
class GroundTruthResponse;
class GroundTruthResponseDefaultTypeInternal;
extern GroundTruthResponseDefaultTypeInternal _GroundTruthResponse_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ModelDeployment;
class ModelDeploymentDefaultTypeInternal;
extern ModelDeploymentDefaultTypeInternal _ModelDeployment_default_instance_;
class Prediction;
class PredictionDefaultTypeInternal;
extern PredictionDefaultTypeInternal _Prediction_default_instance_;
class PredictionItem;
class PredictionItemDefaultTypeInternal;
extern PredictionItemDefaultTypeInternal _PredictionItem_default_instance_;
class PredictionRequest;
class PredictionRequestDefaultTypeInternal;
extern PredictionRequestDefaultTypeInternal _PredictionRequest_default_instance_;
class PredictionResponse;
class PredictionResponseDefaultTypeInternal;
extern PredictionResponseDefaultTypeInternal _PredictionResponse_default_instance_;
}  // namespace edgify
namespace google {
namespace protobuf {
template<> ::edgify::GetCurrentModelDeploymentRequest* Arena::CreateMaybeMessage<::edgify::GetCurrentModelDeploymentRequest>(Arena*);
template<> ::edgify::GetCurrentModelDeploymentResponse* Arena::CreateMaybeMessage<::edgify::GetCurrentModelDeploymentResponse>(Arena*);
template<> ::edgify::GroundTruth* Arena::CreateMaybeMessage<::edgify::GroundTruth>(Arena*);
template<> ::edgify::GroundTruthRequest* Arena::CreateMaybeMessage<::edgify::GroundTruthRequest>(Arena*);
template<> ::edgify::GroundTruthResponse* Arena::CreateMaybeMessage<::edgify::GroundTruthResponse>(Arena*);
template<> ::edgify::Image* Arena::CreateMaybeMessage<::edgify::Image>(Arena*);
template<> ::edgify::ModelDeployment* Arena::CreateMaybeMessage<::edgify::ModelDeployment>(Arena*);
template<> ::edgify::Prediction* Arena::CreateMaybeMessage<::edgify::Prediction>(Arena*);
template<> ::edgify::PredictionItem* Arena::CreateMaybeMessage<::edgify::PredictionItem>(Arena*);
template<> ::edgify::PredictionRequest* Arena::CreateMaybeMessage<::edgify::PredictionRequest>(Arena*);
template<> ::edgify::PredictionResponse* Arena::CreateMaybeMessage<::edgify::PredictionResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace edgify {

// ===================================================================

class PredictionItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.PredictionItem) */ {
 public:
  PredictionItem();
  virtual ~PredictionItem();

  PredictionItem(const PredictionItem& from);

  inline PredictionItem& operator=(const PredictionItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictionItem(PredictionItem&& from) noexcept
    : PredictionItem() {
    *this = ::std::move(from);
  }

  inline PredictionItem& operator=(PredictionItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictionItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictionItem* internal_default_instance() {
    return reinterpret_cast<const PredictionItem*>(
               &_PredictionItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PredictionItem* other);
  friend void swap(PredictionItem& a, PredictionItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictionItem* New() const final {
    return CreateMaybeMessage<PredictionItem>(NULL);
  }

  PredictionItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PredictionItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PredictionItem& from);
  void MergeFrom(const PredictionItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data(int index) const;
  ::std::string* mutable_data(int index);
  void set_data(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_data(int index, ::std::string&& value);
  #endif
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  ::std::string* add_data();
  void add_data(const ::std::string& value);
  #if LANG_CXX11
  void add_data(::std::string&& value);
  #endif
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();

  // @@protoc_insertion_point(class_scope:edgify.PredictionItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_prediction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Prediction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.Prediction) */ {
 public:
  Prediction();
  virtual ~Prediction();

  Prediction(const Prediction& from);

  inline Prediction& operator=(const Prediction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Prediction(Prediction&& from) noexcept
    : Prediction() {
    *this = ::std::move(from);
  }

  inline Prediction& operator=(Prediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Prediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Prediction* internal_default_instance() {
    return reinterpret_cast<const Prediction*>(
               &_Prediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Prediction* other);
  friend void swap(Prediction& a, Prediction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Prediction* New() const final {
    return CreateMaybeMessage<Prediction>(NULL);
  }

  Prediction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Prediction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Prediction& from);
  void MergeFrom(const Prediction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prediction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .edgify.PredictionItem predictions = 5;
  int predictions_size() const;
  void clear_predictions();
  static const int kPredictionsFieldNumber = 5;
  ::edgify::PredictionItem* mutable_predictions(int index);
  ::google::protobuf::RepeatedPtrField< ::edgify::PredictionItem >*
      mutable_predictions();
  const ::edgify::PredictionItem& predictions(int index) const;
  ::edgify::PredictionItem* add_predictions();
  const ::google::protobuf::RepeatedPtrField< ::edgify::PredictionItem >&
      predictions() const;

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string predicted_at = 3;
  void clear_predicted_at();
  static const int kPredictedAtFieldNumber = 3;
  const ::std::string& predicted_at() const;
  void set_predicted_at(const ::std::string& value);
  #if LANG_CXX11
  void set_predicted_at(::std::string&& value);
  #endif
  void set_predicted_at(const char* value);
  void set_predicted_at(const char* value, size_t size);
  ::std::string* mutable_predicted_at();
  ::std::string* release_predicted_at();
  void set_allocated_predicted_at(::std::string* predicted_at);

  // string source = 7;
  void clear_source();
  static const int kSourceFieldNumber = 7;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // .edgify.Image image = 6;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 6;
  private:
  const ::edgify::Image& _internal_image() const;
  public:
  const ::edgify::Image& image() const;
  ::edgify::Image* release_image();
  ::edgify::Image* mutable_image();
  void set_allocated_image(::edgify::Image* image);

  // uint32 duration = 2;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // uint32 model_id = 4;
  void clear_model_id();
  static const int kModelIdFieldNumber = 4;
  ::google::protobuf::uint32 model_id() const;
  void set_model_id(::google::protobuf::uint32 value);

  // bool certain = 8;
  void clear_certain();
  static const int kCertainFieldNumber = 8;
  bool certain() const;
  void set_certain(bool value);

  // @@protoc_insertion_point(class_scope:edgify.Prediction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::edgify::PredictionItem > predictions_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr predicted_at_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::edgify::Image* image_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 model_id_;
  bool certain_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_prediction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(NULL);
  }

  Image* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // bytes image = 2;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // string group_id = 3;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // @@protoc_insertion_point(class_scope:edgify.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_prediction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModelDeployment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.ModelDeployment) */ {
 public:
  ModelDeployment();
  virtual ~ModelDeployment();

  ModelDeployment(const ModelDeployment& from);

  inline ModelDeployment& operator=(const ModelDeployment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModelDeployment(ModelDeployment&& from) noexcept
    : ModelDeployment() {
    *this = ::std::move(from);
  }

  inline ModelDeployment& operator=(ModelDeployment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelDeployment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelDeployment* internal_default_instance() {
    return reinterpret_cast<const ModelDeployment*>(
               &_ModelDeployment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ModelDeployment* other);
  friend void swap(ModelDeployment& a, ModelDeployment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModelDeployment* New() const final {
    return CreateMaybeMessage<ModelDeployment>(NULL);
  }

  ModelDeployment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModelDeployment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModelDeployment& from);
  void MergeFrom(const ModelDeployment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelDeployment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string model_path = 3;
  void clear_model_path();
  static const int kModelPathFieldNumber = 3;
  const ::std::string& model_path() const;
  void set_model_path(const ::std::string& value);
  #if LANG_CXX11
  void set_model_path(::std::string&& value);
  #endif
  void set_model_path(const char* value);
  void set_model_path(const char* value, size_t size);
  ::std::string* mutable_model_path();
  ::std::string* release_model_path();
  void set_allocated_model_path(::std::string* model_path);

  // string config_path = 4;
  void clear_config_path();
  static const int kConfigPathFieldNumber = 4;
  const ::std::string& config_path() const;
  void set_config_path(const ::std::string& value);
  #if LANG_CXX11
  void set_config_path(::std::string&& value);
  #endif
  void set_config_path(const char* value);
  void set_config_path(const char* value, size_t size);
  ::std::string* mutable_config_path();
  ::std::string* release_config_path();
  void set_allocated_config_path(::std::string* config_path);

  // .google.protobuf.Timestamp created_at = 6;
  bool has_created_at() const;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_created_at() const;
  public:
  const ::google::protobuf::Timestamp& created_at() const;
  ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* created_at);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 model_id = 2;
  void clear_model_id();
  static const int kModelIdFieldNumber = 2;
  ::google::protobuf::uint32 model_id() const;
  void set_model_id(::google::protobuf::uint32 value);

  // bool verified = 5;
  void clear_verified();
  static const int kVerifiedFieldNumber = 5;
  bool verified() const;
  void set_verified(bool value);

  // @@protoc_insertion_point(class_scope:edgify.ModelDeployment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr model_path_;
  ::google::protobuf::internal::ArenaStringPtr config_path_;
  ::google::protobuf::Timestamp* created_at_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 model_id_;
  bool verified_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_prediction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroundTruth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.GroundTruth) */ {
 public:
  GroundTruth();
  virtual ~GroundTruth();

  GroundTruth(const GroundTruth& from);

  inline GroundTruth& operator=(const GroundTruth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroundTruth(GroundTruth&& from) noexcept
    : GroundTruth() {
    *this = ::std::move(from);
  }

  inline GroundTruth& operator=(GroundTruth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroundTruth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroundTruth* internal_default_instance() {
    return reinterpret_cast<const GroundTruth*>(
               &_GroundTruth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GroundTruth* other);
  friend void swap(GroundTruth& a, GroundTruth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroundTruth* New() const final {
    return CreateMaybeMessage<GroundTruth>(NULL);
  }

  GroundTruth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroundTruth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GroundTruth& from);
  void MergeFrom(const GroundTruth& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundTruth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // string source = 3;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // .edgify.Prediction prediction = 1;
  bool has_prediction() const;
  void clear_prediction();
  static const int kPredictionFieldNumber = 1;
  private:
  const ::edgify::Prediction& _internal_prediction() const;
  public:
  const ::edgify::Prediction& prediction() const;
  ::edgify::Prediction* release_prediction();
  ::edgify::Prediction* mutable_prediction();
  void set_allocated_prediction(::edgify::Prediction* prediction);

  // @@protoc_insertion_point(class_scope:edgify.GroundTruth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::edgify::Prediction* prediction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_prediction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PredictionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.PredictionRequest) */ {
 public:
  PredictionRequest();
  virtual ~PredictionRequest();

  PredictionRequest(const PredictionRequest& from);

  inline PredictionRequest& operator=(const PredictionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictionRequest(PredictionRequest&& from) noexcept
    : PredictionRequest() {
    *this = ::std::move(from);
  }

  inline PredictionRequest& operator=(PredictionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictionRequest* internal_default_instance() {
    return reinterpret_cast<const PredictionRequest*>(
               &_PredictionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PredictionRequest* other);
  friend void swap(PredictionRequest& a, PredictionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictionRequest* New() const final {
    return CreateMaybeMessage<PredictionRequest>(NULL);
  }

  PredictionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PredictionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PredictionRequest& from);
  void MergeFrom(const PredictionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string source = 3;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // .edgify.Image image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  private:
  const ::edgify::Image& _internal_image() const;
  public:
  const ::edgify::Image& image() const;
  ::edgify::Image* release_image();
  ::edgify::Image* mutable_image();
  void set_allocated_image(::edgify::Image* image);

  // bool withoutPrediction = 2;
  void clear_withoutprediction();
  static const int kWithoutPredictionFieldNumber = 2;
  bool withoutprediction() const;
  void set_withoutprediction(bool value);

  // @@protoc_insertion_point(class_scope:edgify.PredictionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::edgify::Image* image_;
  bool withoutprediction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_prediction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PredictionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.PredictionResponse) */ {
 public:
  PredictionResponse();
  virtual ~PredictionResponse();

  PredictionResponse(const PredictionResponse& from);

  inline PredictionResponse& operator=(const PredictionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictionResponse(PredictionResponse&& from) noexcept
    : PredictionResponse() {
    *this = ::std::move(from);
  }

  inline PredictionResponse& operator=(PredictionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictionResponse* internal_default_instance() {
    return reinterpret_cast<const PredictionResponse*>(
               &_PredictionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PredictionResponse* other);
  friend void swap(PredictionResponse& a, PredictionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictionResponse* New() const final {
    return CreateMaybeMessage<PredictionResponse>(NULL);
  }

  PredictionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PredictionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PredictionResponse& from);
  void MergeFrom(const PredictionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .edgify.Prediction prediction = 1;
  bool has_prediction() const;
  void clear_prediction();
  static const int kPredictionFieldNumber = 1;
  private:
  const ::edgify::Prediction& _internal_prediction() const;
  public:
  const ::edgify::Prediction& prediction() const;
  ::edgify::Prediction* release_prediction();
  ::edgify::Prediction* mutable_prediction();
  void set_allocated_prediction(::edgify::Prediction* prediction);

  // @@protoc_insertion_point(class_scope:edgify.PredictionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::edgify::Prediction* prediction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_prediction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroundTruthRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.GroundTruthRequest) */ {
 public:
  GroundTruthRequest();
  virtual ~GroundTruthRequest();

  GroundTruthRequest(const GroundTruthRequest& from);

  inline GroundTruthRequest& operator=(const GroundTruthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroundTruthRequest(GroundTruthRequest&& from) noexcept
    : GroundTruthRequest() {
    *this = ::std::move(from);
  }

  inline GroundTruthRequest& operator=(GroundTruthRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroundTruthRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroundTruthRequest* internal_default_instance() {
    return reinterpret_cast<const GroundTruthRequest*>(
               &_GroundTruthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GroundTruthRequest* other);
  friend void swap(GroundTruthRequest& a, GroundTruthRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroundTruthRequest* New() const final {
    return CreateMaybeMessage<GroundTruthRequest>(NULL);
  }

  GroundTruthRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroundTruthRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GroundTruthRequest& from);
  void MergeFrom(const GroundTruthRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundTruthRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string source = 2;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // .edgify.GroundTruth ground_truth = 1;
  bool has_ground_truth() const;
  void clear_ground_truth();
  static const int kGroundTruthFieldNumber = 1;
  private:
  const ::edgify::GroundTruth& _internal_ground_truth() const;
  public:
  const ::edgify::GroundTruth& ground_truth() const;
  ::edgify::GroundTruth* release_ground_truth();
  ::edgify::GroundTruth* mutable_ground_truth();
  void set_allocated_ground_truth(::edgify::GroundTruth* ground_truth);

  // @@protoc_insertion_point(class_scope:edgify.GroundTruthRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::edgify::GroundTruth* ground_truth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_prediction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroundTruthResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.GroundTruthResponse) */ {
 public:
  GroundTruthResponse();
  virtual ~GroundTruthResponse();

  GroundTruthResponse(const GroundTruthResponse& from);

  inline GroundTruthResponse& operator=(const GroundTruthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroundTruthResponse(GroundTruthResponse&& from) noexcept
    : GroundTruthResponse() {
    *this = ::std::move(from);
  }

  inline GroundTruthResponse& operator=(GroundTruthResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroundTruthResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroundTruthResponse* internal_default_instance() {
    return reinterpret_cast<const GroundTruthResponse*>(
               &_GroundTruthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GroundTruthResponse* other);
  friend void swap(GroundTruthResponse& a, GroundTruthResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroundTruthResponse* New() const final {
    return CreateMaybeMessage<GroundTruthResponse>(NULL);
  }

  GroundTruthResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroundTruthResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GroundTruthResponse& from);
  void MergeFrom(const GroundTruthResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundTruthResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:edgify.GroundTruthResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_prediction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetCurrentModelDeploymentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.GetCurrentModelDeploymentRequest) */ {
 public:
  GetCurrentModelDeploymentRequest();
  virtual ~GetCurrentModelDeploymentRequest();

  GetCurrentModelDeploymentRequest(const GetCurrentModelDeploymentRequest& from);

  inline GetCurrentModelDeploymentRequest& operator=(const GetCurrentModelDeploymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCurrentModelDeploymentRequest(GetCurrentModelDeploymentRequest&& from) noexcept
    : GetCurrentModelDeploymentRequest() {
    *this = ::std::move(from);
  }

  inline GetCurrentModelDeploymentRequest& operator=(GetCurrentModelDeploymentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCurrentModelDeploymentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCurrentModelDeploymentRequest* internal_default_instance() {
    return reinterpret_cast<const GetCurrentModelDeploymentRequest*>(
               &_GetCurrentModelDeploymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetCurrentModelDeploymentRequest* other);
  friend void swap(GetCurrentModelDeploymentRequest& a, GetCurrentModelDeploymentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCurrentModelDeploymentRequest* New() const final {
    return CreateMaybeMessage<GetCurrentModelDeploymentRequest>(NULL);
  }

  GetCurrentModelDeploymentRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetCurrentModelDeploymentRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetCurrentModelDeploymentRequest& from);
  void MergeFrom(const GetCurrentModelDeploymentRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrentModelDeploymentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:edgify.GetCurrentModelDeploymentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_prediction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetCurrentModelDeploymentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgify.GetCurrentModelDeploymentResponse) */ {
 public:
  GetCurrentModelDeploymentResponse();
  virtual ~GetCurrentModelDeploymentResponse();

  GetCurrentModelDeploymentResponse(const GetCurrentModelDeploymentResponse& from);

  inline GetCurrentModelDeploymentResponse& operator=(const GetCurrentModelDeploymentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCurrentModelDeploymentResponse(GetCurrentModelDeploymentResponse&& from) noexcept
    : GetCurrentModelDeploymentResponse() {
    *this = ::std::move(from);
  }

  inline GetCurrentModelDeploymentResponse& operator=(GetCurrentModelDeploymentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCurrentModelDeploymentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCurrentModelDeploymentResponse* internal_default_instance() {
    return reinterpret_cast<const GetCurrentModelDeploymentResponse*>(
               &_GetCurrentModelDeploymentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetCurrentModelDeploymentResponse* other);
  friend void swap(GetCurrentModelDeploymentResponse& a, GetCurrentModelDeploymentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCurrentModelDeploymentResponse* New() const final {
    return CreateMaybeMessage<GetCurrentModelDeploymentResponse>(NULL);
  }

  GetCurrentModelDeploymentResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetCurrentModelDeploymentResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetCurrentModelDeploymentResponse& from);
  void MergeFrom(const GetCurrentModelDeploymentResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrentModelDeploymentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .edgify.ModelDeployment model_deployment = 1;
  bool has_model_deployment() const;
  void clear_model_deployment();
  static const int kModelDeploymentFieldNumber = 1;
  private:
  const ::edgify::ModelDeployment& _internal_model_deployment() const;
  public:
  const ::edgify::ModelDeployment& model_deployment() const;
  ::edgify::ModelDeployment* release_model_deployment();
  ::edgify::ModelDeployment* mutable_model_deployment();
  void set_allocated_model_deployment(::edgify::ModelDeployment* model_deployment);

  // @@protoc_insertion_point(class_scope:edgify.GetCurrentModelDeploymentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::edgify::ModelDeployment* model_deployment_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_prediction_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PredictionItem

// repeated string data = 1;
inline int PredictionItem::data_size() const {
  return data_.size();
}
inline void PredictionItem::clear_data() {
  data_.Clear();
}
inline const ::std::string& PredictionItem::data(int index) const {
  // @@protoc_insertion_point(field_get:edgify.PredictionItem.data)
  return data_.Get(index);
}
inline ::std::string* PredictionItem::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:edgify.PredictionItem.data)
  return data_.Mutable(index);
}
inline void PredictionItem::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:edgify.PredictionItem.data)
  data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PredictionItem::set_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:edgify.PredictionItem.data)
  data_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PredictionItem::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:edgify.PredictionItem.data)
}
inline void PredictionItem::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edgify.PredictionItem.data)
}
inline ::std::string* PredictionItem::add_data() {
  // @@protoc_insertion_point(field_add_mutable:edgify.PredictionItem.data)
  return data_.Add();
}
inline void PredictionItem::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:edgify.PredictionItem.data)
}
#if LANG_CXX11
inline void PredictionItem::add_data(::std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:edgify.PredictionItem.data)
}
#endif
inline void PredictionItem::add_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:edgify.PredictionItem.data)
}
inline void PredictionItem::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:edgify.PredictionItem.data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PredictionItem::data() const {
  // @@protoc_insertion_point(field_list:edgify.PredictionItem.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PredictionItem::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:edgify.PredictionItem.data)
  return &data_;
}

// -------------------------------------------------------------------

// Prediction

// string uuid = 1;
inline void Prediction::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Prediction::uuid() const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.uuid)
  return uuid_.GetNoArena();
}
inline void Prediction::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.Prediction.uuid)
}
#if LANG_CXX11
inline void Prediction::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.Prediction.uuid)
}
#endif
inline void Prediction::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.Prediction.uuid)
}
inline void Prediction::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.Prediction.uuid)
}
inline ::std::string* Prediction::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:edgify.Prediction.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Prediction::release_uuid() {
  // @@protoc_insertion_point(field_release:edgify.Prediction.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Prediction::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:edgify.Prediction.uuid)
}

// uint32 duration = 2;
inline void Prediction::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 Prediction::duration() const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.duration)
  return duration_;
}
inline void Prediction::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:edgify.Prediction.duration)
}

// string predicted_at = 3;
inline void Prediction::clear_predicted_at() {
  predicted_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Prediction::predicted_at() const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.predicted_at)
  return predicted_at_.GetNoArena();
}
inline void Prediction::set_predicted_at(const ::std::string& value) {
  
  predicted_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.Prediction.predicted_at)
}
#if LANG_CXX11
inline void Prediction::set_predicted_at(::std::string&& value) {
  
  predicted_at_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.Prediction.predicted_at)
}
#endif
inline void Prediction::set_predicted_at(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  predicted_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.Prediction.predicted_at)
}
inline void Prediction::set_predicted_at(const char* value, size_t size) {
  
  predicted_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.Prediction.predicted_at)
}
inline ::std::string* Prediction::mutable_predicted_at() {
  
  // @@protoc_insertion_point(field_mutable:edgify.Prediction.predicted_at)
  return predicted_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Prediction::release_predicted_at() {
  // @@protoc_insertion_point(field_release:edgify.Prediction.predicted_at)
  
  return predicted_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Prediction::set_allocated_predicted_at(::std::string* predicted_at) {
  if (predicted_at != NULL) {
    
  } else {
    
  }
  predicted_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), predicted_at);
  // @@protoc_insertion_point(field_set_allocated:edgify.Prediction.predicted_at)
}

// uint32 model_id = 4;
inline void Prediction::clear_model_id() {
  model_id_ = 0u;
}
inline ::google::protobuf::uint32 Prediction::model_id() const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.model_id)
  return model_id_;
}
inline void Prediction::set_model_id(::google::protobuf::uint32 value) {
  
  model_id_ = value;
  // @@protoc_insertion_point(field_set:edgify.Prediction.model_id)
}

// repeated .edgify.PredictionItem predictions = 5;
inline int Prediction::predictions_size() const {
  return predictions_.size();
}
inline void Prediction::clear_predictions() {
  predictions_.Clear();
}
inline ::edgify::PredictionItem* Prediction::mutable_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:edgify.Prediction.predictions)
  return predictions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::edgify::PredictionItem >*
Prediction::mutable_predictions() {
  // @@protoc_insertion_point(field_mutable_list:edgify.Prediction.predictions)
  return &predictions_;
}
inline const ::edgify::PredictionItem& Prediction::predictions(int index) const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.predictions)
  return predictions_.Get(index);
}
inline ::edgify::PredictionItem* Prediction::add_predictions() {
  // @@protoc_insertion_point(field_add:edgify.Prediction.predictions)
  return predictions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edgify::PredictionItem >&
Prediction::predictions() const {
  // @@protoc_insertion_point(field_list:edgify.Prediction.predictions)
  return predictions_;
}

// .edgify.Image image = 6;
inline bool Prediction::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
inline void Prediction::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
}
inline const ::edgify::Image& Prediction::_internal_image() const {
  return *image_;
}
inline const ::edgify::Image& Prediction::image() const {
  const ::edgify::Image* p = image_;
  // @@protoc_insertion_point(field_get:edgify.Prediction.image)
  return p != NULL ? *p : *reinterpret_cast<const ::edgify::Image*>(
      &::edgify::_Image_default_instance_);
}
inline ::edgify::Image* Prediction::release_image() {
  // @@protoc_insertion_point(field_release:edgify.Prediction.image)
  
  ::edgify::Image* temp = image_;
  image_ = NULL;
  return temp;
}
inline ::edgify::Image* Prediction::mutable_image() {
  
  if (image_ == NULL) {
    auto* p = CreateMaybeMessage<::edgify::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:edgify.Prediction.image)
  return image_;
}
inline void Prediction::set_allocated_image(::edgify::Image* image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_;
  }
  if (image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:edgify.Prediction.image)
}

// string source = 7;
inline void Prediction::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Prediction::source() const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.source)
  return source_.GetNoArena();
}
inline void Prediction::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.Prediction.source)
}
#if LANG_CXX11
inline void Prediction::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.Prediction.source)
}
#endif
inline void Prediction::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.Prediction.source)
}
inline void Prediction::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.Prediction.source)
}
inline ::std::string* Prediction::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:edgify.Prediction.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Prediction::release_source() {
  // @@protoc_insertion_point(field_release:edgify.Prediction.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Prediction::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:edgify.Prediction.source)
}

// bool certain = 8;
inline void Prediction::clear_certain() {
  certain_ = false;
}
inline bool Prediction::certain() const {
  // @@protoc_insertion_point(field_get:edgify.Prediction.certain)
  return certain_;
}
inline void Prediction::set_certain(bool value) {
  
  certain_ = value;
  // @@protoc_insertion_point(field_set:edgify.Prediction.certain)
}

// -------------------------------------------------------------------

// Image

// string uuid = 1;
inline void Image::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::uuid() const {
  // @@protoc_insertion_point(field_get:edgify.Image.uuid)
  return uuid_.GetNoArena();
}
inline void Image::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.Image.uuid)
}
#if LANG_CXX11
inline void Image::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.Image.uuid)
}
#endif
inline void Image::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.Image.uuid)
}
inline void Image::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.Image.uuid)
}
inline ::std::string* Image::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:edgify.Image.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_uuid() {
  // @@protoc_insertion_point(field_release:edgify.Image.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:edgify.Image.uuid)
}

// bytes image = 2;
inline void Image::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::image() const {
  // @@protoc_insertion_point(field_get:edgify.Image.image)
  return image_.GetNoArena();
}
inline void Image::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.Image.image)
}
#if LANG_CXX11
inline void Image::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.Image.image)
}
#endif
inline void Image::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.Image.image)
}
inline void Image::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.Image.image)
}
inline ::std::string* Image::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:edgify.Image.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_image() {
  // @@protoc_insertion_point(field_release:edgify.Image.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:edgify.Image.image)
}

// string group_id = 3;
inline void Image::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::group_id() const {
  // @@protoc_insertion_point(field_get:edgify.Image.group_id)
  return group_id_.GetNoArena();
}
inline void Image::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.Image.group_id)
}
#if LANG_CXX11
inline void Image::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.Image.group_id)
}
#endif
inline void Image::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.Image.group_id)
}
inline void Image::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.Image.group_id)
}
inline ::std::string* Image::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:edgify.Image.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_group_id() {
  // @@protoc_insertion_point(field_release:edgify.Image.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:edgify.Image.group_id)
}

// -------------------------------------------------------------------

// ModelDeployment

// uint32 id = 1;
inline void ModelDeployment::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ModelDeployment::id() const {
  // @@protoc_insertion_point(field_get:edgify.ModelDeployment.id)
  return id_;
}
inline void ModelDeployment::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:edgify.ModelDeployment.id)
}

// uint32 model_id = 2;
inline void ModelDeployment::clear_model_id() {
  model_id_ = 0u;
}
inline ::google::protobuf::uint32 ModelDeployment::model_id() const {
  // @@protoc_insertion_point(field_get:edgify.ModelDeployment.model_id)
  return model_id_;
}
inline void ModelDeployment::set_model_id(::google::protobuf::uint32 value) {
  
  model_id_ = value;
  // @@protoc_insertion_point(field_set:edgify.ModelDeployment.model_id)
}

// string model_path = 3;
inline void ModelDeployment::clear_model_path() {
  model_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelDeployment::model_path() const {
  // @@protoc_insertion_point(field_get:edgify.ModelDeployment.model_path)
  return model_path_.GetNoArena();
}
inline void ModelDeployment::set_model_path(const ::std::string& value) {
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.ModelDeployment.model_path)
}
#if LANG_CXX11
inline void ModelDeployment::set_model_path(::std::string&& value) {
  
  model_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.ModelDeployment.model_path)
}
#endif
inline void ModelDeployment::set_model_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.ModelDeployment.model_path)
}
inline void ModelDeployment::set_model_path(const char* value, size_t size) {
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.ModelDeployment.model_path)
}
inline ::std::string* ModelDeployment::mutable_model_path() {
  
  // @@protoc_insertion_point(field_mutable:edgify.ModelDeployment.model_path)
  return model_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelDeployment::release_model_path() {
  // @@protoc_insertion_point(field_release:edgify.ModelDeployment.model_path)
  
  return model_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelDeployment::set_allocated_model_path(::std::string* model_path) {
  if (model_path != NULL) {
    
  } else {
    
  }
  model_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_path);
  // @@protoc_insertion_point(field_set_allocated:edgify.ModelDeployment.model_path)
}

// string config_path = 4;
inline void ModelDeployment::clear_config_path() {
  config_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelDeployment::config_path() const {
  // @@protoc_insertion_point(field_get:edgify.ModelDeployment.config_path)
  return config_path_.GetNoArena();
}
inline void ModelDeployment::set_config_path(const ::std::string& value) {
  
  config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.ModelDeployment.config_path)
}
#if LANG_CXX11
inline void ModelDeployment::set_config_path(::std::string&& value) {
  
  config_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.ModelDeployment.config_path)
}
#endif
inline void ModelDeployment::set_config_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.ModelDeployment.config_path)
}
inline void ModelDeployment::set_config_path(const char* value, size_t size) {
  
  config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.ModelDeployment.config_path)
}
inline ::std::string* ModelDeployment::mutable_config_path() {
  
  // @@protoc_insertion_point(field_mutable:edgify.ModelDeployment.config_path)
  return config_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelDeployment::release_config_path() {
  // @@protoc_insertion_point(field_release:edgify.ModelDeployment.config_path)
  
  return config_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelDeployment::set_allocated_config_path(::std::string* config_path) {
  if (config_path != NULL) {
    
  } else {
    
  }
  config_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_path);
  // @@protoc_insertion_point(field_set_allocated:edgify.ModelDeployment.config_path)
}

// bool verified = 5;
inline void ModelDeployment::clear_verified() {
  verified_ = false;
}
inline bool ModelDeployment::verified() const {
  // @@protoc_insertion_point(field_get:edgify.ModelDeployment.verified)
  return verified_;
}
inline void ModelDeployment::set_verified(bool value) {
  
  verified_ = value;
  // @@protoc_insertion_point(field_set:edgify.ModelDeployment.verified)
}

// .google.protobuf.Timestamp created_at = 6;
inline bool ModelDeployment::has_created_at() const {
  return this != internal_default_instance() && created_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& ModelDeployment::_internal_created_at() const {
  return *created_at_;
}
inline const ::google::protobuf::Timestamp& ModelDeployment::created_at() const {
  const ::google::protobuf::Timestamp* p = created_at_;
  // @@protoc_insertion_point(field_get:edgify.ModelDeployment.created_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ModelDeployment::release_created_at() {
  // @@protoc_insertion_point(field_release:edgify.ModelDeployment.created_at)
  
  ::google::protobuf::Timestamp* temp = created_at_;
  created_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ModelDeployment::mutable_created_at() {
  
  if (created_at_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:edgify.ModelDeployment.created_at)
  return created_at_;
}
inline void ModelDeployment::set_allocated_created_at(::google::protobuf::Timestamp* created_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:edgify.ModelDeployment.created_at)
}

// -------------------------------------------------------------------

// GroundTruth

// .edgify.Prediction prediction = 1;
inline bool GroundTruth::has_prediction() const {
  return this != internal_default_instance() && prediction_ != NULL;
}
inline void GroundTruth::clear_prediction() {
  if (GetArenaNoVirtual() == NULL && prediction_ != NULL) {
    delete prediction_;
  }
  prediction_ = NULL;
}
inline const ::edgify::Prediction& GroundTruth::_internal_prediction() const {
  return *prediction_;
}
inline const ::edgify::Prediction& GroundTruth::prediction() const {
  const ::edgify::Prediction* p = prediction_;
  // @@protoc_insertion_point(field_get:edgify.GroundTruth.prediction)
  return p != NULL ? *p : *reinterpret_cast<const ::edgify::Prediction*>(
      &::edgify::_Prediction_default_instance_);
}
inline ::edgify::Prediction* GroundTruth::release_prediction() {
  // @@protoc_insertion_point(field_release:edgify.GroundTruth.prediction)
  
  ::edgify::Prediction* temp = prediction_;
  prediction_ = NULL;
  return temp;
}
inline ::edgify::Prediction* GroundTruth::mutable_prediction() {
  
  if (prediction_ == NULL) {
    auto* p = CreateMaybeMessage<::edgify::Prediction>(GetArenaNoVirtual());
    prediction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:edgify.GroundTruth.prediction)
  return prediction_;
}
inline void GroundTruth::set_allocated_prediction(::edgify::Prediction* prediction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prediction_;
  }
  if (prediction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prediction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prediction, submessage_arena);
    }
    
  } else {
    
  }
  prediction_ = prediction;
  // @@protoc_insertion_point(field_set_allocated:edgify.GroundTruth.prediction)
}

// string label = 2;
inline void GroundTruth::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroundTruth::label() const {
  // @@protoc_insertion_point(field_get:edgify.GroundTruth.label)
  return label_.GetNoArena();
}
inline void GroundTruth::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.GroundTruth.label)
}
#if LANG_CXX11
inline void GroundTruth::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.GroundTruth.label)
}
#endif
inline void GroundTruth::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.GroundTruth.label)
}
inline void GroundTruth::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.GroundTruth.label)
}
inline ::std::string* GroundTruth::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:edgify.GroundTruth.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroundTruth::release_label() {
  // @@protoc_insertion_point(field_release:edgify.GroundTruth.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroundTruth::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:edgify.GroundTruth.label)
}

// string source = 3;
inline void GroundTruth::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroundTruth::source() const {
  // @@protoc_insertion_point(field_get:edgify.GroundTruth.source)
  return source_.GetNoArena();
}
inline void GroundTruth::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.GroundTruth.source)
}
#if LANG_CXX11
inline void GroundTruth::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.GroundTruth.source)
}
#endif
inline void GroundTruth::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.GroundTruth.source)
}
inline void GroundTruth::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.GroundTruth.source)
}
inline ::std::string* GroundTruth::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:edgify.GroundTruth.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroundTruth::release_source() {
  // @@protoc_insertion_point(field_release:edgify.GroundTruth.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroundTruth::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:edgify.GroundTruth.source)
}

// -------------------------------------------------------------------

// PredictionRequest

// .edgify.Image image = 1;
inline bool PredictionRequest::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
inline void PredictionRequest::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
}
inline const ::edgify::Image& PredictionRequest::_internal_image() const {
  return *image_;
}
inline const ::edgify::Image& PredictionRequest::image() const {
  const ::edgify::Image* p = image_;
  // @@protoc_insertion_point(field_get:edgify.PredictionRequest.image)
  return p != NULL ? *p : *reinterpret_cast<const ::edgify::Image*>(
      &::edgify::_Image_default_instance_);
}
inline ::edgify::Image* PredictionRequest::release_image() {
  // @@protoc_insertion_point(field_release:edgify.PredictionRequest.image)
  
  ::edgify::Image* temp = image_;
  image_ = NULL;
  return temp;
}
inline ::edgify::Image* PredictionRequest::mutable_image() {
  
  if (image_ == NULL) {
    auto* p = CreateMaybeMessage<::edgify::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:edgify.PredictionRequest.image)
  return image_;
}
inline void PredictionRequest::set_allocated_image(::edgify::Image* image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_;
  }
  if (image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:edgify.PredictionRequest.image)
}

// bool withoutPrediction = 2;
inline void PredictionRequest::clear_withoutprediction() {
  withoutprediction_ = false;
}
inline bool PredictionRequest::withoutprediction() const {
  // @@protoc_insertion_point(field_get:edgify.PredictionRequest.withoutPrediction)
  return withoutprediction_;
}
inline void PredictionRequest::set_withoutprediction(bool value) {
  
  withoutprediction_ = value;
  // @@protoc_insertion_point(field_set:edgify.PredictionRequest.withoutPrediction)
}

// string source = 3;
inline void PredictionRequest::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PredictionRequest::source() const {
  // @@protoc_insertion_point(field_get:edgify.PredictionRequest.source)
  return source_.GetNoArena();
}
inline void PredictionRequest::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.PredictionRequest.source)
}
#if LANG_CXX11
inline void PredictionRequest::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.PredictionRequest.source)
}
#endif
inline void PredictionRequest::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.PredictionRequest.source)
}
inline void PredictionRequest::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.PredictionRequest.source)
}
inline ::std::string* PredictionRequest::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:edgify.PredictionRequest.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PredictionRequest::release_source() {
  // @@protoc_insertion_point(field_release:edgify.PredictionRequest.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PredictionRequest::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:edgify.PredictionRequest.source)
}

// -------------------------------------------------------------------

// PredictionResponse

// .edgify.Prediction prediction = 1;
inline bool PredictionResponse::has_prediction() const {
  return this != internal_default_instance() && prediction_ != NULL;
}
inline void PredictionResponse::clear_prediction() {
  if (GetArenaNoVirtual() == NULL && prediction_ != NULL) {
    delete prediction_;
  }
  prediction_ = NULL;
}
inline const ::edgify::Prediction& PredictionResponse::_internal_prediction() const {
  return *prediction_;
}
inline const ::edgify::Prediction& PredictionResponse::prediction() const {
  const ::edgify::Prediction* p = prediction_;
  // @@protoc_insertion_point(field_get:edgify.PredictionResponse.prediction)
  return p != NULL ? *p : *reinterpret_cast<const ::edgify::Prediction*>(
      &::edgify::_Prediction_default_instance_);
}
inline ::edgify::Prediction* PredictionResponse::release_prediction() {
  // @@protoc_insertion_point(field_release:edgify.PredictionResponse.prediction)
  
  ::edgify::Prediction* temp = prediction_;
  prediction_ = NULL;
  return temp;
}
inline ::edgify::Prediction* PredictionResponse::mutable_prediction() {
  
  if (prediction_ == NULL) {
    auto* p = CreateMaybeMessage<::edgify::Prediction>(GetArenaNoVirtual());
    prediction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:edgify.PredictionResponse.prediction)
  return prediction_;
}
inline void PredictionResponse::set_allocated_prediction(::edgify::Prediction* prediction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prediction_;
  }
  if (prediction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prediction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prediction, submessage_arena);
    }
    
  } else {
    
  }
  prediction_ = prediction;
  // @@protoc_insertion_point(field_set_allocated:edgify.PredictionResponse.prediction)
}

// -------------------------------------------------------------------

// GroundTruthRequest

// .edgify.GroundTruth ground_truth = 1;
inline bool GroundTruthRequest::has_ground_truth() const {
  return this != internal_default_instance() && ground_truth_ != NULL;
}
inline void GroundTruthRequest::clear_ground_truth() {
  if (GetArenaNoVirtual() == NULL && ground_truth_ != NULL) {
    delete ground_truth_;
  }
  ground_truth_ = NULL;
}
inline const ::edgify::GroundTruth& GroundTruthRequest::_internal_ground_truth() const {
  return *ground_truth_;
}
inline const ::edgify::GroundTruth& GroundTruthRequest::ground_truth() const {
  const ::edgify::GroundTruth* p = ground_truth_;
  // @@protoc_insertion_point(field_get:edgify.GroundTruthRequest.ground_truth)
  return p != NULL ? *p : *reinterpret_cast<const ::edgify::GroundTruth*>(
      &::edgify::_GroundTruth_default_instance_);
}
inline ::edgify::GroundTruth* GroundTruthRequest::release_ground_truth() {
  // @@protoc_insertion_point(field_release:edgify.GroundTruthRequest.ground_truth)
  
  ::edgify::GroundTruth* temp = ground_truth_;
  ground_truth_ = NULL;
  return temp;
}
inline ::edgify::GroundTruth* GroundTruthRequest::mutable_ground_truth() {
  
  if (ground_truth_ == NULL) {
    auto* p = CreateMaybeMessage<::edgify::GroundTruth>(GetArenaNoVirtual());
    ground_truth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:edgify.GroundTruthRequest.ground_truth)
  return ground_truth_;
}
inline void GroundTruthRequest::set_allocated_ground_truth(::edgify::GroundTruth* ground_truth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ground_truth_;
  }
  if (ground_truth) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ground_truth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ground_truth, submessage_arena);
    }
    
  } else {
    
  }
  ground_truth_ = ground_truth;
  // @@protoc_insertion_point(field_set_allocated:edgify.GroundTruthRequest.ground_truth)
}

// string source = 2;
inline void GroundTruthRequest::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroundTruthRequest::source() const {
  // @@protoc_insertion_point(field_get:edgify.GroundTruthRequest.source)
  return source_.GetNoArena();
}
inline void GroundTruthRequest::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgify.GroundTruthRequest.source)
}
#if LANG_CXX11
inline void GroundTruthRequest::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:edgify.GroundTruthRequest.source)
}
#endif
inline void GroundTruthRequest::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgify.GroundTruthRequest.source)
}
inline void GroundTruthRequest::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgify.GroundTruthRequest.source)
}
inline ::std::string* GroundTruthRequest::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:edgify.GroundTruthRequest.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroundTruthRequest::release_source() {
  // @@protoc_insertion_point(field_release:edgify.GroundTruthRequest.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroundTruthRequest::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:edgify.GroundTruthRequest.source)
}

// -------------------------------------------------------------------

// GroundTruthResponse

// -------------------------------------------------------------------

// GetCurrentModelDeploymentRequest

// -------------------------------------------------------------------

// GetCurrentModelDeploymentResponse

// .edgify.ModelDeployment model_deployment = 1;
inline bool GetCurrentModelDeploymentResponse::has_model_deployment() const {
  return this != internal_default_instance() && model_deployment_ != NULL;
}
inline void GetCurrentModelDeploymentResponse::clear_model_deployment() {
  if (GetArenaNoVirtual() == NULL && model_deployment_ != NULL) {
    delete model_deployment_;
  }
  model_deployment_ = NULL;
}
inline const ::edgify::ModelDeployment& GetCurrentModelDeploymentResponse::_internal_model_deployment() const {
  return *model_deployment_;
}
inline const ::edgify::ModelDeployment& GetCurrentModelDeploymentResponse::model_deployment() const {
  const ::edgify::ModelDeployment* p = model_deployment_;
  // @@protoc_insertion_point(field_get:edgify.GetCurrentModelDeploymentResponse.model_deployment)
  return p != NULL ? *p : *reinterpret_cast<const ::edgify::ModelDeployment*>(
      &::edgify::_ModelDeployment_default_instance_);
}
inline ::edgify::ModelDeployment* GetCurrentModelDeploymentResponse::release_model_deployment() {
  // @@protoc_insertion_point(field_release:edgify.GetCurrentModelDeploymentResponse.model_deployment)
  
  ::edgify::ModelDeployment* temp = model_deployment_;
  model_deployment_ = NULL;
  return temp;
}
inline ::edgify::ModelDeployment* GetCurrentModelDeploymentResponse::mutable_model_deployment() {
  
  if (model_deployment_ == NULL) {
    auto* p = CreateMaybeMessage<::edgify::ModelDeployment>(GetArenaNoVirtual());
    model_deployment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:edgify.GetCurrentModelDeploymentResponse.model_deployment)
  return model_deployment_;
}
inline void GetCurrentModelDeploymentResponse::set_allocated_model_deployment(::edgify::ModelDeployment* model_deployment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete model_deployment_;
  }
  if (model_deployment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      model_deployment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, model_deployment, submessage_arena);
    }
    
  } else {
    
  }
  model_deployment_ = model_deployment;
  // @@protoc_insertion_point(field_set_allocated:edgify.GetCurrentModelDeploymentResponse.model_deployment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace edgify

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_prediction_2eproto
